const fs = require("fs-extra");
const path = require("path");

module.exports = {
  config: {
    name: "setlang",
    version: "3.0.0",
    author: "NTKhang & Upgraded by ‚ú®Asif‚ú®",
    countDown: 3,
    role: 1, // Bot admin only
    description: {
      en: "Advanced language configuration system for bot",
      vi: "H·ªá th·ªëng c·∫•u h√¨nh ng√¥n ng·ªØ n√¢ng cao cho bot",
      bn: "‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ"
    },
    category: "administration",
    guide: {
      en: `üìå Usage Guide:
‚Ä¢ {pn} <language code> - Set language for current chat
‚Ä¢ {pn} <language code> -g - Set global language (admin only)
‚Ä¢ {pn} list - Show available languages
‚Ä¢ {pn} reset - Reset to default language

üåê Supported Language Codes: en, vi, bn, etc.`,
      bn: `üìå ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ:
‚Ä¢ {pn} <‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ï‡ßã‡¶°> - ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} <‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ï‡ßã‡¶°> -g - ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®)
‚Ä¢ {pn} list - ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶≠‡¶æ‡¶∑‡¶æ‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
‚Ä¢ {pn} reset - ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

üåê ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶ø‡¶§ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ï‡ßã‡¶°: en, vi, bn, ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø`
    }
  },

  langs: {
    en: {
      successCurrent: "‚úÖ Language set to '%1' for this chat",
      successGlobal: "üåç Global language set to '%1'",
      noPermission: "‚õî Only bot admins can change global language",
      invalidLang: "‚ùå Invalid language code '%1'",
      langList: "üìú Available Languages:\n%1",
      resetCurrent: "üîÑ Language reset to default for this chat",
      resetGlobal: "üîÑ Global language reset to default",
      error: "‚ùå An error occurred: %1"
    },
    bn: {
      successCurrent: "‚úÖ ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá '%1'",
      successGlobal: "üåç ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá '%1'",
      noPermission: "‚õî ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá",
      invalidLang: "‚ùå ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ï‡ßã‡¶° '%1'",
      langList: "üìú ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∏‡¶Æ‡ßÇ‡¶π:\n%1",
      resetCurrent: "üîÑ ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      resetGlobal: "üîÑ ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      error: "‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: %1"
    }
  },

  onStart: async function ({ 
    message, 
    event, 
    args, 
    threadsData, 
    role, 
    getLang,
    prefix
  }) {
    try {
      const action = args[0]?.toLowerCase();
      const langCode = action === "list" || action === "reset" ? null : args[0];
      const isGlobal = args[1]?.toLowerCase() === "-g";

      // Show language list
      if (action === "list") {
        const langFiles = fs.readdirSync(path.join(__dirname, "../../languages"))
          .filter(file => file.endsWith('.lang'))
          .map(file => file.replace('.lang', ''))
          .join(', ');
        return message.reply(getLang("langList", langFiles));
      }

      // Reset language
      if (action === "reset") {
        if (isGlobal) {
          if (role < 2) return message.reply(getLang("noPermission"));
          global.GoatBot.config.language = null;
          fs.writeFileSync(global.client.dirConfig, JSON.stringify(global.GoatBot.config, null, 2));
          return message.reply(getLang("resetGlobal"));
        }
        await threadsData.set(event.threadID, null, "data.lang");
        return message.reply(getLang("resetCurrent"));
      }

      // Validate language code
      if (!langCode) return message.SyntaxError();

      const langFilePath = path.join(__dirname, `../../languages/${langCode}.lang`);
      if (!fs.existsSync(langFilePath)) {
        return message.reply(getLang("invalidLang", langCode));
      }

      // Set language globally
      if (isGlobal) {
        if (role < 2) return message.reply(getLang("noPermission"));
        
        const langData = fs.readFileSync(langFilePath, "utf-8")
          .split(/\r?\n/)
          .filter(line => line.trim() && !line.startsWith("#") && !line.startsWith("//"));

        global.language = {};
        for (const line of langData) {
          const [key, ...valueParts] = line.split("=");
          const value = valueParts.join("=").trim().replace(/\\n/g, "\n");
          const [category, ...keyParts] = key.trim().split(".");
          
          if (!global.language[category]) {
            global.language[category] = {};
          }
          global.language[category][keyParts.join(".")] = value;
        }

        global.GoatBot.config.language = langCode;
        fs.writeFileSync(global.client.dirConfig, JSON.stringify(global.GoatBot.config, null, 2));
        return message.reply(getLang("successGlobal", langCode));
      }

      // Set language for current thread
      await threadsData.set(event.threadID, langCode, "data.lang");
      return message.reply(getLang("successCurrent", langCode));

    } catch (error) {
      console.error("Language setting error:", error);
      return message.reply(getLang("error", error.message));
    }
  }
};
