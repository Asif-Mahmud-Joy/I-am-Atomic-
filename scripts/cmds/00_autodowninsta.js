const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");

const CACHE_DIR = path.join(__dirname, "cache");
fs.ensureDirSync(CACHE_DIR);

module.exports = {
  threadStates: {},

  config: {
    name: 'autoinsta_v2',
    version: '2.2',
    author: 'ЁЭРАЁЭРмЁЭРвЁЭРЯ ЁЭРМЁЭРЪЁЭРбЁЭРжЁЭРоЁЭРЭ',
    countDown: 5,
    role: 0,
    maxVideoSizeMB: 25, // ржХржиржлрж┐ржЧрж╛рж░рзЗржмрж▓ ржнрж┐ржбрж┐ржУ рж╕рж╛ржЗржЬ рж▓рж┐ржорж┐ржЯ (MB)
    shortDescription: 'ЁЯУе Auto Instagram ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржбрж╛рж░',
    longDescription: 'ржЗржирж╕рзНржЯрж╛ржЧрзНрж░рж╛ржо ржнрж┐ржбрж┐ржУ рж▓рж┐ржЩрзНржХ рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржбрж┐ржЯрзЗржХрзНржЯ ржХрж░рзЗ ржбрж╛ржЙржирж▓рзЛржб ржУ рж╢рзЗрзЯрж╛рж░ ржХрж░рзЗред',
    category: 'media',
    guide: {
      en: "Use: autoinsta on/off ржжрж┐рзЯрзЗ ржЪрж╛рж▓рзБ/ржмржирзНржз ржХрж░рзЛред Instagram ржнрж┐ржбрж┐ржУ рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛ржУред"
    }
  },

  // ржкрзБрж░рж╛ржирзЛ ржХрзНржпрж╛рж╢ ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ (рзз ржШржгрзНржЯрж╛рж░ ржмрзЗрж╢рж┐ ржкрзБрж░рж╛ржирзЛ)
  async cleanOldCacheFiles() {
    try {
      const files = await fs.readdir(CACHE_DIR);
      const now = Date.now();
      for (const file of files) {
        const filePath = path.join(CACHE_DIR, file);
        const stats = await fs.stat(filePath);
        if (now - stats.mtimeMs > 3600000) { // рзз ржШржгрзНржЯрж╛
          await fs.unlink(filePath);
          console.log(`ЁЯз╣ ржХрзНржпрж╛рж╢ ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ рж╣рзЯрзЗржЫрзЗ: ${file}`);
        }
      }
    } catch (err) {
      console.error("ЁЯЫа ржХрзНржпрж╛рж╢ ржХрзНрж▓рж┐ржиржЖржк ржПrror:", err);
    }
  },

  onLoad: function () {
    // ржкрзНрж░рждрж┐ рзз ржШржгрзНржЯрж╛рзЯ ржХрзНржпрж╛рж╢ ржХрзНрж▓рж┐ржиржЖржк ржЪрж╛рж▓рж╛ржирзЛ рж╣ржмрзЗ
    setInterval(() => {
      this.cleanOldCacheFiles();
    }, 3600000); // 3600000ms = 1 hour
  },

  onStart: async function ({ api, event }) {
    const threadID = event.threadID;
    if (!this.threadStates[threadID]) {
      this.threadStates[threadID] = { autoInstaEnabled: false };
    }
    const msg = (event.body || "").toLowerCase();

    if (msg.includes("autoinsta")) {
      await api.sendMessageTyping(threadID);

      if (msg.includes("on")) {
        this.threadStates[threadID].autoInstaEnabled = true;
        return api.sendMessage("тЬЕ *AutoInsta* ржЪрж╛рж▓рзБ рж╣рзЯрзЗржЫрзЗ! ржПржЦржи Instagram ржнрж┐ржбрж┐ржУ рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛ржУред ЁЯОЙ", threadID, event.messageID);
      } else if (msg.includes("off")) {
        this.threadStates[threadID].autoInstaEnabled = false;
        return api.sendMessage("тЭМ *AutoInsta* ржмржирзНржз ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржкрзНрж░рзЯрзЛржЬржирзЗ ржЖржмрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рзЛред", threadID, event.messageID);
      } else {
        return api.sendMessage("тД╣я╕П *ржмрзНржпржмрж╣рж╛рж░:* 'autoinsta on' ржЕржержмрж╛ 'autoinsta off' рж▓рж┐ржЦрзЗ ржЪрж╛рж▓рзБ/ржмржирзНржз ржХрж░рзЛред", threadID, event.messageID);
      }
    }
  },

  onChat: async function ({ api, event }) {
    const threadID = event.threadID;
    const msg = event.body || "";

    if (this.threadStates[threadID]?.autoInstaEnabled && this.checkLink(msg)) {
      await api.sendMessageTyping(threadID);
      api.setMessageReaction("тПм", event.messageID, () => {}, true);
      this.downloadAndSendVideo(msg, api, event);
    }
  },

  // ржЗржирж╕рзНржЯрж╛ржЧрзНрж░рж╛ржорзЗрж░ ржирждрзБржи ржУ ржкрзБрж░рж╛ржирзЛ URL ржлрж░ржорзНржпрж╛ржЯ рж╕рж╛ржкрзЛрж░рзНржЯ (Regex ржЖржкржбрзЗржЯ)
  checkLink: function (text) {
    const instaRegex = /(?:https?:\/\/)?(?:www\.)?(instagram\.com|instagr\.am)\/(?:p|tv|reel|stories)\/[^\s]+/i;
    return instaRegex.test(text);
  },

  getDownloadLink: async function (url) {
    try {
      const res = await axios.get(`https://rishadapi.deno.dev/insta?url=${encodeURIComponent(url)}`);
      if (
        res.data &&
        typeof res.data === "object" &&
        res.data.success === true &&
        typeof res.data.video === "string" &&
        res.data.video.startsWith("http")
      ) {
        return res.data.video;
      } else {
        throw new Error("тЭМ API ржерзЗржХрзЗ ржнрж┐ржбрж┐ржУ рж▓рж┐ржЩрзНржХ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред");
      }
    } catch (err) {
      console.error("ЁЯЫа API Error:", err);
      throw new Error("тЭМ ржнрж┐ржбрж┐ржУ рж▓рж┐ржЩрзНржХ ржЖржирж╛рж░ рж╕ржорзЯ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред");
    }
  },

  downloadAndSendVideo: async function (url, api, event) {
    const threadID = event.threadID;
    try {
      await api.sendMessageTyping(threadID);
      await api.sendMessage("тП│ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб рж╢рзБрж░рзБ рж╣рзЯрзЗржЫрзЗ, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...", threadID);

      const videoUrl = await this.getDownloadLink(url);
      const fileName = `${Date.now()}.mp4`;
      const filePath = path.join(CACHE_DIR, fileName);

      const videoResp = await axios.get(videoUrl, { responseType: "arraybuffer" });
      await fs.outputFile(filePath, videoResp.data);

      const stats = await fs.stat(filePath);
      const maxSize = this.config.maxVideoSizeMB * 1024 * 1024;
      if (stats.size > maxSize) {
        await fs.unlink(filePath);
        return api.sendMessage(
          `тЪая╕П ржнрж┐ржбрж┐ржУрж░ рж╕рж╛ржЗржЬ ${this.config.maxVideoSizeMB}MB ржПрж░ ржмрзЗрж╢рж┐ рж╣ржУрзЯрж╛рзЯ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ред`,
          threadID,
          event.messageID
        );
      }

      await api.sendMessage({
        body: "тЬЕ Instagram ржерзЗржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб рж╣рзЯрзЗржЫрзЗред ржирж┐ржЪрзЗ ржжрзЗржЦрж╛ржУ рж╣рж▓рзЛ:",
        attachment: fs.createReadStream(filePath)
      }, threadID, () => fs.unlink(filePath), event.messageID);

      // ржХрзНржпрж╛рж╢ ржХрзНрж▓рж┐ржиржЖржк
      this.cleanOldCacheFiles();

    } catch (err) {
      console.error("ЁЯЫа Download/send error:", err);
      const customMsg = err.message || "тЭМ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржмрж╛ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржжрзЯрж╛ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред";
      return api.sendMessage(customMsg, threadID, event.messageID);
    }
  }
};
