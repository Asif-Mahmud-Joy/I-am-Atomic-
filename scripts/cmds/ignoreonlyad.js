const fs = require("fs-extra");

module.exports = {
  config: {
    name: "ignoreonlyad",
    aliases: ["ignoreadonly", "ignoreonlyadmin", "ignoreadminonly"],
    version: "1.3",
    author: "ЁЯОй ЁЭРМЁЭРл.ЁЭРТЁЭРжЁЭРиЁЭРдЁЭРЮЁЭР▓ тАв ЁЭРАЁЭРмЁЭРвЁЭРЯ ЁЭРМЁЭРЪЁЭРбЁЭРжЁЭРоЁЭРЭ ЁЯМа",
    countDown: 5,
    role: 2,
    description: {
      en: "Ignore specific commands in adminonly mode",
      bn: "AdminOnly ржЪрж╛рж▓рзБ ржерж╛ржХрж╛ ржЕржмрж╕рзНржерж╛ржпрж╝ ржпрзЗржЗ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ Add ржХрж░рж╛ ржерж╛ржХржмрзЗ, рж╕рзЗржЧрзБрж▓рзЛ normal user ржУ use ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ"
    },
    category: "owner",
    guide: {
      en: "{pn} add <command>\n{pn} del <command>\n{pn} list",
      bn: "{pn} add <command>: ржХрзЛржи command ржХрзЗ ignore list ржП add ржХрж░рждрзЗ\n{pn} del <command>: ржХрзЛржи command ржХрзЗ ignore list ржерзЗржХрзЗ ржмрж╛ржж ржжрж┐рждрзЗ\n{pn} list: ignore ржХрж░рж╛ command ржЧрзБрж▓рзЛрж░ list ржжрзЗржЦрждрзЗ"
    }
  },

  langs: {
    en: {
      missingCommandNameToAdd: "тЪая╕П Please provide a command to add to ignore list.",
      missingCommandNameToDelete: "тЪая╕П Please provide a command to remove from ignore list.",
      commandNotFound: "тЭМ Command \"%1\" not found.",
      commandAlreadyInList: "тЭМ \"%1\" already in ignore list.",
      commandAdded: "тЬЕ \"%1\" added to ignore list.",
      commandNotInList: "тЭМ \"%1\" is not in ignore list.",
      commandDeleted: "тЬЕ \"%1\" removed from ignore list.",
      ignoreList: "ЁЯУС Commands ignored in adminonly: %1"
    },
    bn: {
      missingCommandNameToAdd: "тЪая╕П Add ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ command ржжрж┐ржи.",
      missingCommandNameToDelete: "тЪая╕П Remove ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ command ржжрж┐ржи.",
      commandNotFound: "тЭМ \"%1\" ржирж╛ржорзЗрж░ ржХрзЛржи command ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐.",
      commandAlreadyInList: "тЭМ \"%1\" ржЗрждрж┐ржоржзрзНржпрзЗ ignore list ржП ржЖржЫрзЗ.",
      commandAdded: "тЬЕ \"%1\" ignore list ржП ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ.",
      commandNotInList: "тЭМ \"%1\" ignore list ржП ржирзЗржЗ.",
      commandDeleted: "тЬЕ \"%1\" ignore list ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ.",
      ignoreList: "ЁЯУС AdminOnly рждрзЗ ржпрзЗржЗ command ржЧрзБрж▓рзЛ ignore рж╣ржЪрзНржЫрзЗ: %1"
    }
  },

  onStart: async function ({ args, message, getLang }) {
    const configPath = global.client.dirConfig;
    const configData = global.GoatBot.config;
    const ignoreList = configData.adminOnly.ignoreCommand || [];

    const lang = getLang;
    const cmdName = args[1]?.toLowerCase();
    const send = (key, ...rest) => message.reply(lang(key, ...rest));

    switch (args[0]) {
      case "add": {
        if (!cmdName) return send("missingCommandNameToAdd");
        if (!global.GoatBot.commands.has(cmdName)) return send("commandNotFound", cmdName);
        if (ignoreList.includes(cmdName)) return send("commandAlreadyInList", cmdName);

        ignoreList.push(cmdName);
        configData.adminOnly.ignoreCommand = ignoreList;
        fs.writeFileSync(configPath, JSON.stringify(configData, null, 2));
        return send("commandAdded", cmdName);
      }
      case "del":
      case "remove":
      case "rm":
      case "delete": {
        if (!cmdName) return send("missingCommandNameToDelete");
        if (!global.GoatBot.commands.has(cmdName)) return send("commandNotFound", cmdName);
        if (!ignoreList.includes(cmdName)) return send("commandNotInList", cmdName);

        configData.adminOnly.ignoreCommand = ignoreList.filter(cmd => cmd !== cmdName);
        fs.writeFileSync(configPath, JSON.stringify(configData, null, 2));
        return send("commandDeleted", cmdName);
      }
      case "list": {
        const showList = ignoreList.length ? ignoreList.join(", ") : "(Empty)";
        return send("ignoreList", showList);
      }
      default:
        return message.SyntaxError();
    }
  }
};
