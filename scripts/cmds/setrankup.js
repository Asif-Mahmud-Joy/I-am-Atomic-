const { drive, getStreamFromURL, getExtFromUrl, getTime } = global.utils;
const URL_REGEX = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/;

module.exports = {
  config: {
    name: "setrankup",
    aliases: ["rankupconfig", "setuprankup"],
    version: "3.0.0",
    author: "NTKhang & Upgraded by ‚ú®Asif‚ú®",
    countDown: 5,
    role: 1, // Requires admin privileges
    description: {
      en: "Advanced rankup configuration system",
      vi: "H·ªá th·ªëng c·∫•u h√¨nh rankup n√¢ng cao",
      bn: "‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡¶Ü‡¶™ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ"
    },
    category: "administration",
    guide: {
      en: `üìå Command Guide:
‚Ä¢ {pn} text <message> - Set rankup message
‚Ä¢ {pn} media <url> - Set rankup media (image/video)
‚Ä¢ {pn} reset - Reset to default configuration

üîÑ Available placeholders:
- {userName} - Member's name
- {userNameTag} - Tagged member's name
- {oldRank} - Previous rank
- {currentRank} - New rank

üìé Supported media: Images, Videos`,
      bn: `üìå ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ:
‚Ä¢ {pn} text <message> - ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡¶Ü‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} media <url> - ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡¶Ü‡¶™ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶õ‡¶¨‡¶ø/‡¶≠‡¶ø‡¶°‡¶ø‡¶ì)
‚Ä¢ {pn} reset - ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

üîÑ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶™‡ßç‡¶≤‡ßá‡¶∏‡¶π‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞:
- {userName} - ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
- {userNameTag} - ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶®‡¶æ‡¶Æ
- {oldRank} - ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï
- {currentRank} - ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï

üìé ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶ø‡¶§ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ: ‡¶õ‡¶¨‡¶ø, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì`
    }
  },

  langs: {
    en: {
      changedMessage: "‚úÖ Rankup message set to:\n%1",
      missingMedia: "‚ö†Ô∏è Please attach or provide a URL for the media",
      changedMedia: "üìé Successfully set %1 media file(s) for rankup",
      resetSuccess: "üîÑ Rankup configuration reset to default",
      invalidUrl: "‚ùå Invalid URL provided",
      error: "‚ùå An error occurred: %1",
      help: `üìö Need help? Use '{pn} guide' for detailed instructions`
    },
    bn: {
      changedMessage: "‚úÖ ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡¶Ü‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n%1",
      missingMedia: "‚ö†Ô∏è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡¶æ URL ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
      changedMedia: "üìé %1‡¶ü‡¶ø ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      resetSuccess: "üîÑ ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡¶Ü‡¶™ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      invalidUrl: "‚ùå ‡¶Ö‡¶¨‡ßà‡¶ß URL ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      error: "‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: %1",
      help: `üìö ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®? '{pn} guide' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø`
    }
  },

  onStart: async function ({ 
    message, 
    event, 
    args, 
    threadsData, 
    getLang,
    prefix
  }) {
    try {
      const { threadID, senderID, body, attachments, messageReply } = event;
      const action = args[0]?.toLowerCase();
      const lang = getLang;

      if (!action || action === "help") {
        return message.reply(lang("help").replace(/{pn}/g, prefix + this.config.name));
      }

      const threadData = await threadsData.get(threadID);
      if (!threadData.data.rankup) {
        threadData.data.rankup = {};
      }

      switch (action) {
        case "text": {
          const newContent = body.slice(body.indexOf(args[0]) + args[0].length).trim();
          if (!newContent) return message.reply(lang("missingMessage"));
          
          threadData.data.rankup.message = newContent;
          await threadsData.set(threadID, threadData.data, "data");
          return message.reply(lang("changedMessage", newContent));
        }

        case "media":
        case "file": {
          const mediaUrls = [];
          
          // Check attachments
          const allAttachments = [...(attachments || []), ...(messageReply?.attachments || [])];
          const validAttachments = allAttachments.filter(
            item => ["photo", "animated_image", "video"].includes(item.type)
          );

          // Check URL argument
          const urlArg = args[1];
          if (urlArg && URL_REGEX.test(urlArg)) {
            mediaUrls.push(urlArg);
          }

          if (validAttachments.length === 0 && mediaUrls.length === 0) {
            return message.reply(lang("missingMedia"));
          }

          // Process attachments
          if (!threadData.data.rankup.attachments) {
            threadData.data.rankup.attachments = [];
          }

          // Clear existing attachments
          if (threadData.data.rankup.attachments.length > 0) {
            try {
              await Promise.all(
                threadData.data.rankup.attachments.map(fileId => drive.deleteFile(fileId))
            );
            } catch (error) {
              console.error("Error deleting old files:", error);
            }
            threadData.data.rankup.attachments = [];
          }

          // Upload new attachments
          for (const attachment of validAttachments) {
            try {
              const ext = getExtFromUrl(attachment.url);
              const fileName = `rankup_${threadID}_${senderID}_${getTime()}.${ext}`;
              const fileData = await getStreamFromURL(attachment.url);
              const fileInfo = await drive.uploadFile(fileName, fileData);
              threadData.data.rankup.attachments.push(fileInfo.id);
            } catch (error) {
              console.error("Error uploading attachment:", error);
            }
          }

          // Handle URL media
          for (const url of mediaUrls) {
            try {
              const ext = getExtFromUrl(url);
              const fileName = `rankup_${threadID}_${senderID}_${getTime()}.${ext}`;
              const fileData = await getStreamFromURL(url);
              const fileInfo = await drive.uploadFile(fileName, fileData);
              threadData.data.rankup.attachments.push(fileInfo.id);
            } catch (error) {
              console.error("Error processing URL:", error);
            }
          }

          await threadsData.set(threadID, threadData.data, "data");
          return message.reply(
            lang("changedMedia", threadData.data.rankup.attachments.length)
          );
        }

        case "reset": {
          // Delete existing attachments
          if (threadData.data.rankup?.attachments?.length > 0) {
            try {
              await Promise.all(
                threadData.data.rankup.attachments.map(fileId => drive.deleteFile(fileId))
            );
            } catch (error) {
              console.error("Error deleting files:", error);
            }
          }

          // Reset configuration
          delete threadData.data.rankup;
          await threadsData.set(threadID, threadData.data, "data");
          return message.reply(lang("resetSuccess"));
        }

        default: {
          return message.SyntaxError();
        }
      }
    } catch (error) {
      console.error("Error in setrankup command:", error);
      return message.reply(lang("error", error.message));
    }
  }
};
