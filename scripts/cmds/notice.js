const { getStreamsFromAttachment } = global.utils;

module.exports = {
  config: {
    name: "notice",
    aliases: ["notif", "noti"],
    version: "2.0",
    author: "‚ú® Mr.Smokey [Asif Mahmud] ‚ú®",
    countDown: 5,
    role: 1,
    shortDescription: {
      en: "Send premium notice to all groups",
      bn: "‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤‡¶ø‡¶∂ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡¶æ‡¶†‡¶æ‡¶®"
    },
    longDescription: {
      en: "Admin can send a stylish notice to all groups with optional media and user mention",
      bn: "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®, ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶Ü‡¶∞ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶π"
    },
    category: "owner",
    guide: {
      en: "{pn} <your message>",
      bn: "{pn} <‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ>"
    },
    envConfig: {
      delayPerGroup: 300
    }
  },

  langs: {
    en: {
      missingMessage: "‚ö†Ô∏è Please enter a message to send.",
      sending: "‚è≥ Sending notice to %1 groups...",
      success: "‚úÖ Successfully sent notices to %1 groups.",
      failure: "‚ùå Failed to send to %1 groups:\n%2"
    },
    bn: {
      missingMessage: "‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
      sending: "‚è≥ ‡¶Æ‡ßã‡¶ü %1 ‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...",
      success: "‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá %1 ‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
      failure: "‚ùå %1 ‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•:\n%2"
    }
  },

  onStart: async function ({ message, api, event, args, commandName, envCommands, getLang }) {
    const lang = getLang;
    const { delayPerGroup } = envCommands[commandName];

    if (!args.length) return message.reply(lang("missingMessage"));

    const timestamp = new Date().toLocaleString("en-US", { timeZone: "Asia/Dhaka" });
    const userMention = event.messageReply?.senderID
      ? `üë§ Mentioned User: [@${event.messageReply.senderID}]`
      : "";

    const noticeMessage = `„Äé ùó¢ùó≥ùó≥ùó∂ùó∞ùó∂ùóÆùóπ ùó°ùóºùòÅùó∂ùó∞ùó≤ „Äè\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüïí ${timestamp}\n${userMention}\n\nüì¢ ${args.join(" ")}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚úÖ Admin Announcement`;

    const attachments = await getStreamsFromAttachment([
      ...event.attachments,
      ...(event.messageReply?.attachments || [])
    ]);

    const formSend = { body: noticeMessage, attachment: attachments };

    const allThreads = await api.getThreadList(1000, null, ["INBOX"]);
    const groupThreads = allThreads.filter(thread => thread.isGroup);

    if (groupThreads.length === 0)
      return message.reply(lang("failure", 0, "No groups found."));

    message.reply(lang("sending", groupThreads.length));

    let success = 0;
    let errors = [];
    const pending = [];

    for (const { threadID } of groupThreads) {
      try {
        pending.push({ threadID, pending: api.sendMessage(formSend, threadID) });
        await new Promise(r => setTimeout(r, delayPerGroup));
      } catch (err) {
        errors.push({ id: threadID, error: err.message });
      }
    }

    for (const { threadID, pending: task } of pending) {
      try {
        await task;
        success++;
      } catch (err) {
        errors.push({ id: threadID, error: err.message });
      }
    }

    const errorText = errors.length
      ? lang("failure", errors.length, errors.map(e => `‚Ä¢ ${e.id} - ${e.error}`).join("\n"))
      : "";

    return message.reply(lang("success", success) + (errorText ? `\n${errorText}` : ""));
  }
};
