module.exports = {
  config: {
    name: "count",
    version: "2.0",
    author: "Asif",
    countDown: 3,
    role: 0,
    shortDescription: {
      en: "‚ö° Atomic Message Counter",
      bn: "‚ö° ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶Æ‡¶ø‡¶ï ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞"
    },
    longDescription: {
      en: "Track message statistics with atomic design visualization",
      bn: "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶Æ‡¶ø‡¶ï ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"
    },
    category: "‚ö° Atomic",
    guide: {
      en: "{pn} [@tag | all]",
      bn: "{pn} [@‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó | all]"
    }
  },

  langs: {
    en: {
      leaderboard: "‚ö° ATOMIC MESSAGE LEADERBOARD ‚ö°",
      yourStats: "üåü YOUR ATOMIC STATS üåü",
      userStats: "‚öõÔ∏è USER MESSAGE STATS ‚öõÔ∏è",
      rank: "üèÜ Rank",
      messages: "üí¨ Messages",
      position: "üìç Position",
      pageInfo: "üìÑ Page %1/%2",
      nextPage: "‚è≠Ô∏è Reply with page number to view next",
      noMessages: "üåå Zero messages detected in quantum field",
      medal: ["ü•á", "ü•à", "ü•â", "üîπ", "üî∏"]
    },
    bn: {
      leaderboard: "‚ö° ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶Æ‡¶ø‡¶ï ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶°‡¶æ‡¶∞‡¶¨‡ßã‡¶∞‡ßç‡¶° ‚ö°",
      yourStats: "üåü ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® üåü",
      userStats: "‚öõÔ∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‚öõÔ∏è",
      rank: "üèÜ ‡¶∞‚Äå‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï",
      messages: "üí¨ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú",
      position: "üìç ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®",
      pageInfo: "üìÑ ‡¶™‡¶æ‡¶§‡¶æ %1/%2",
      nextPage: "‚è≠Ô∏è ‡¶™‡¶∞‡ßá‡¶∞ ‡¶™‡¶æ‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßá‡¶ú ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®",
      noMessages: "üåå ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶®‡ßç‡¶ü‡¶æ‡¶Æ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶∂‡ßÇ‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      medal: ["ü•á", "ü•à", "ü•â", "üîπ", "üî∏"]
    }
  },

  onStart: async function ({ args, threadsData, message, event, api, commandName, getLang }) {
    try {
      const { threadID, senderID } = event;
      const threadData = await threadsData.get(threadID);
      const usersInGroup = (await api.getThreadInfo(threadID)).participantIDs;
      
      // Get members and filter inactive
      let members = threadData.members || [];
      members = members.filter(m => usersInGroup.includes(m.userID));
      
      // Add missing members
      for (const participantID of usersInGroup) {
        if (!members.some(m => m.userID === participantID)) {
          members.push({
            userID: participantID,
            name: await global.utils.getUserName(api, participantID),
            count: 0
          });
        }
      }

      // Sort by message count
      members.sort((a, b) => b.count - a.count);
      members.forEach((member, index) => member.rank = index + 1);

      // Atomic Design Visualization
      const getProgressBar = (count, max) => {
        const barLength = 10;
        const progress = Math.min(1, count / max);
        const filled = Math.round(progress * barLength);
        return '‚ñà'.repeat(filled) + '‚ñÅ'.repeat(barLength - filled);
      };

      const maxMessages = members[0]?.count || 1;

      if (args[0]?.toLowerCase() === "all") {
        // Atomic Leaderboard
        const lang = getLang();
        const itemsPerPage = 10;
        const totalPages = Math.ceil(members.length / itemsPerPage);
        let page = parseInt(args[1]) || 1;
        
        if (page < 1 || page > totalPages) {
          return message.reply(lang.pageInfo.replace("%1", page).replace("%2", totalPages));
        }

        const startIdx = (page - 1) * itemsPerPage;
        const pageData = members.slice(startIdx, startIdx + itemsPerPage);
        
        let leaderboard = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  ${lang.leaderboard}  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n`;
        leaderboard += `‚ïë ${lang.rank.padEnd(6)} ${lang.messages.padEnd(8)} üë§ User\n`;
        leaderboard += `‚ïü${"‚îÄ".repeat(45)}‚ï¢\n`;
        
        pageData.forEach(user => {
          const medal = lang.medal[user.rank - 1] || `${user.rank}.`;
          const progressBar = getProgressBar(user.count, maxMessages);
          leaderboard += `‚ïë ${medal.padEnd(6)} ${String(user.count).padEnd(8)} ${user.name}\n`;
          leaderboard += `‚ïë      ${progressBar} ${Math.round((user.count/maxMessages)*100)}%\n`;
          leaderboard += `‚ïü${"‚îÄ".repeat(45)}‚ï¢\n`;
        });
        
        leaderboard += `‚ïë ${lang.pageInfo.replace("%1", page).replace("%2", totalPages)}\n`;
        leaderboard += `‚ïë ${lang.nextPage}\n`;
        leaderboard += `‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;
        
        return message.reply(leaderboard, (err, info) => {
          global.GoatBot.onReply.set(info.messageID, {
            commandName,
            messageID: info.messageID,
            members,
            page,
            totalPages,
            author: senderID
          });
        });
      }
      else if (Object.keys(event.mentions).length > 0) {
        // User-specific stats
        const lang = getLang();
        let userStats = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  ${lang.userStats}  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n`;
        
        for (const id in event.mentions) {
          const user = members.find(u => u.userID === id);
          if (user) {
            const medal = lang.medal[user.rank - 1] || `${user.rank}.`;
            const progressBar = getProgressBar(user.count, maxMessages);
            userStats += `‚ïë üë§ ${user.name}\n`;
            userStats += `‚ïë ${lang.rank}: ${medal}\n`;
            userStats += `‚ïë ${lang.messages}: ${user.count}\n`;
            userStats += `‚ïë ${progressBar} ${Math.round((user.count/maxMessages)*100)}%\n`;
            userStats += `‚ïü${"‚îÄ".repeat(35)}‚ï¢\n`;
          }
        }
        
        userStats += `‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;
        return message.reply(userStats);
      }
      else {
        // Personal stats
        const user = members.find(u => u.userID === senderID);
        const lang = getLang();
        const medal = lang.medal[user.rank - 1] || `${user.rank}.`;
        const progressBar = getProgressBar(user.count, maxMessages);
        
        const personalStats = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  ${lang.yourStats}  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n` +
                              `‚ïë ${lang.position}: ${medal}\n` +
                              `‚ïë ${lang.messages}: ${user.count}\n` +
                              `‚ïë ${progressBar} ${Math.round((user.count/maxMessages)*100)}%\n` +
                              `‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;
                              
        return message.reply(personalStats);
      }
    } catch (error) {
      console.error("Atomic Count Error:", error);
      message.reply("‚ö†Ô∏è Quantum fluctuation detected! Please try again.");
    }
  },

  onReply: async ({ message, event, Reply, commandName, getLang }) => {
    const { senderID, body } = event;
    const { author, members, page, totalPages } = Reply;
    
    if (author !== senderID) {
      return message.reply("üîí Quantum signature mismatch! Access denied.");
    }

    const newPage = parseInt(body);
    if (isNaN(newPage) return;
    
    const lang = getLang();
    const itemsPerPage = 10;
    const maxMessages = members[0]?.count || 1;
    
    const getProgressBar = (count, max) => {
      const barLength = 10;
      const progress = Math.min(1, count / max);
      const filled = Math.round(progress * barLength);
      return '‚ñà'.repeat(filled) + '‚ñÅ'.repeat(barLength - filled);
    };

    const startIdx = (newPage - 1) * itemsPerPage;
    const pageData = members.slice(startIdx, startIdx + itemsPerPage);
    
    let leaderboard = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  ${lang.leaderboard}  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n`;
    leaderboard += `‚ïë ${lang.rank.padEnd(6)} ${lang.messages.padEnd(8)} üë§ User\n`;
    leaderboard += `‚ïü${"‚îÄ".repeat(45)}‚ï¢\n`;
    
    pageData.forEach(user => {
      const medal = lang.medal[user.rank - 1] || `${user.rank}.`;
      const progressBar = getProgressBar(user.count, maxMessages);
      leaderboard += `‚ïë ${medal.padEnd(6)} ${String(user.count).padEnd(8)} ${user.name}\n`;
      leaderboard += `‚ïë      ${progressBar} ${Math.round((user.count/maxMessages)*100)}%\n`;
      leaderboard += `‚ïü${"‚îÄ".repeat(45)}‚ï¢\n`;
    });
    
    leaderboard += `‚ïë ${lang.pageInfo.replace("%1", newPage).replace("%2", totalPages)}\n`;
    leaderboard += `‚ïë ${lang.nextPage}\n`;
    leaderboard += `‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;
    
    message.reply(leaderboard, (err, info) => {
      message.unsend(Reply.messageID);
      global.GoatBot.onReply.set(info.messageID, {
        commandName,
        messageID: info.messageID,
        members,
        page: newPage,
        totalPages,
        author: senderID
      });
    });
  },

  onChat: async ({ usersData, threadsData, event }) => {
    const { senderID, threadID } = event;
    let members = await threadsData.get(threadID, "members") || [];
    const userIndex = members.findIndex(u => u.userID === senderID);

    if (userIndex === -1) {
      members.push({
        userID: senderID,
        name: await usersData.getName(senderID),
        count: 1
      });
    } else {
      members[userIndex].count = (members[userIndex].count || 0) + 1;
    }

    await threadsData.set(threadID, members, "members");
  }
};
