const { randomString, getTime, convertTime } = global.utils;

const rows = [
    { col: 4, row: 10, rewardPoint: 1 },
    { col: 5, row: 12, rewardPoint: 2 },
    { col: 6, row: 15, rewardPoint: 3 }
];

module.exports = {
    config: {
        name: "guessnumber",
        aliases: ["guessnum"],
        version: "1.3",
        author: "ЁЯОй ЁЭРМЁЭРл.ЁЭРТЁЭРжЁЭРиЁЭРдЁЭРЮЁЭР▓ тАв ЁЭРАЁЭРмЁЭРвЁЭРЯ ЁЭРМЁЭРЪЁЭРбЁЭРжЁЭРоЁЭРЭ ЁЯМа",
        countDown: 5,
        role: 0,
        description: {
            vi: "Tr├▓ ch╞бi ─Сo├бn sс╗С",
            en: "Guess number game",
            bn: "рж╕ржВржЦрзНржпрж╛ ржЕржирзБржорж╛ржи ржЦрзЗрж▓рж╛"
        },
        category: "game",
        guide: {
            vi: "  {pn} [4 | 5 | 6] [single | multi]: Tс║бo mс╗Щt tr├▓ ch╞бi mс╗Ыi, vс╗Ыi:\n    4 5 6 l├а sс╗С chс╗п sс╗С cс╗зa sс╗С cс║зn ─Сo├бn, mс║╖c ─Сс╗Лnh l├а 4.\n    single | multi l├а chс║┐ ─Сс╗Щ ch╞бi, single l├а 1 ng╞░с╗Эi ch╞бi, multi l├а nhiс╗Бu ng╞░с╗Эi ch╞бi, mс║╖c ─Сс╗Лnh l├а single.\n   V├н dс╗е:\n    {pn}\n    {pn} 4 single\n\n   C├бch ch╞бi: Trс║г lс╗Эi tin nhс║пn cс╗зa bot vс╗Ыi sс╗С bс║бn ─Сo├бn.\n   Bс║бn c├│ " + rows.map(item => `${item.row} lс║зn (${item.col} sс╗С)`).join(", ") + ".\n   Sau mс╗Чi lс║зn ─Сo├бn, bс║бn sс║╜ nhс║нn ─С╞░с╗гc gс╗гi ├╜: sс╗С l╞░с╗гng chс╗п sс╗С ─С├║ng v├а sс╗С chс╗п sс╗С ─С├║ng vс╗Л tr├н.\n   L╞░u ├╜: Sс╗С ─С╞░с╗гc tс║бo tс╗л c├бc chс╗п sс╗С 0-9, mс╗Чi chс╗п sс╗С chс╗Й xuс║еt hiс╗Зn mс╗Щt lс║зn, c├│ thс╗Г bс║пt ─Сс║зu bс║▒ng 0.\n\n   {pn} rank <trang>: Xem bс║гng xс║┐p hс║бng.\n   {pn} info [<uid> | <@tag> | <reply> | <kh├┤ng nhс║нp>]: Xem th├┤ng tin xс║┐p hс║бng cс╗зa bс║бn hoс║╖c ng╞░с╗Эi kh├бc.\n   {pn} reset: ─Рс║╖t lс║бi bс║гng xс║┐p hс║бng (chс╗Й admin bot).",
            en: "  {pn} [4 | 5 | 6] [single | multi]: Create a new game, with:\n    4 5 6 is the number of digits to guess, default is 4.\n    single | multi is the game mode, single is 1 player, multi is multi-player, default is single.\n   Example:\n    {pn}\n    {pn} 4 single\n\n   How to play: Reply to the bot's message with your guessed number.\n   You have " + rows.map(item => `${item.row} tries (${item.col} digits)`).join(", ") + ".\n   After each guess, you'll get hints: number of correct digits and correct digits in correct positions.\n   Note: The number uses digits 0-9, each appearing once, and can start with 0.\n\n   {pn} rank <page>: View the ranking.\n   {pn} info [<uid> | <@tag> | <reply> | <empty>]: View your or another's ranking info.\n   {pn} reset: Reset the ranking (admin only).",
            bn: "  {pn} [4 | 5 | 6] [single | multi]: ржПржХржЯрж┐ ржирждрзБржи ржЦрзЗрж▓рж╛ рждрзИрж░рж┐ ржХрж░рзБржи, рж╕рж╛ржерзЗ:\n    4 5 6 рж╣рж▓ ржЕржирзБржорж╛ржи ржХрж░рж╛рж░ рж╕ржВржЦрзНржпрж╛рж░ ржЕржЩрзНржХрзЗрж░ рж╕ржВржЦрзНржпрж╛, ржбрж┐ржлрж▓рзНржЯ рж╣рж▓ 4ред\n    single | multi рж╣рж▓ ржЦрзЗрж▓рж╛рж░ ржорзЛржб, single рж╣рж▓ 1 ржЦрзЗрж▓рзЛржпрж╝рж╛ржбрж╝, multi рж╣рж▓ ржПржХрж╛ржзрж┐ржХ ржЦрзЗрж▓рзЛржпрж╝рж╛ржбрж╝, ржбрж┐ржлрж▓рзНржЯ рж╣рж▓ singleред\n   ржЙржжрж╛рж╣рж░ржг:\n    {pn}\n    {pn} 4 single\n\n   ржХрзАржнрж╛ржмрзЗ ржЦрзЗрж▓ржмрзЗржи: ржмржЯрзЗрж░ ржмрж╛рж░рзНрждрж╛рж░ ржЙрждрзНрждрж░рзЗ ржЖржкржирж╛рж░ ржЕржирзБржорж╛ржи ржХрж░рж╛ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред\n   ржЖржкржирж╛рж░ ржЖржЫрзЗ " + rows.map(item => `${item.row} ржмрж╛рж░ (${item.col} ржЕржЩрзНржХ)`).join(", ") + "ред\n   ржкрзНрж░рждрж┐ржЯрж┐ ржЕржирзБржорж╛ржирзЗрж░ ржкрж░рзЗ, ржЖржкржирж┐ ржЗржЩрзНржЧрж┐ржд ржкрж╛ржмрзЗржи: рж╕ржарж┐ржХ ржЕржЩрзНржХрзЗрж░ рж╕ржВржЦрзНржпрж╛ ржПржмржВ рж╕ржарж┐ржХ ржЕржмрж╕рзНржерж╛ржирзЗ рж╕ржарж┐ржХ ржЕржЩрзНржХрзЗрж░ рж╕ржВржЦрзНржпрж╛ред\n   ржирзЛржЯ: рж╕ржВржЦрзНржпрж╛ржЯрж┐ 0-9 ржЕржЩрзНржХ ржжрж┐ржпрж╝рзЗ ржЧржарж┐ржд, ржкрзНрж░рждрж┐ржЯрж┐ ржЕржЩрзНржХ ржПржХржмрж╛рж░ржЗ ржерж╛ржХрзЗ ржПржмржВ 0 ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ рж╣рждрзЗ ржкрж╛рж░рзЗред\n\n   {pn} rank <ржкрзГрж╖рзНржарж╛>: рж░тАМрзНржпрж╛ржЩрзНржХрж┐ржВ ржжрзЗржЦрзБржиред\n   {pn} info [<uid> | <@tag> | <reply> | <ржЦрж╛рж▓рж┐>]: ржЖржкржирж╛рж░ ржмрж╛ ржЕржирзНржпрзЗрж░ рж░тАМрзНржпрж╛ржЩрзНржХрж┐ржВ рждржерзНржп ржжрзЗржЦрзБржиред\n   {pn} reset: рж░тАМрзНржпрж╛ржЩрзНржХрж┐ржВ рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи (рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи)ред"
        }
    },

    langs: {
        vi: {
            charts: "ЁЯПЖ | Bс║гng xс║┐p hс║бng:\n%1",
            pageInfo: "Trang %1/%2",
            noScore: "тнХ | Ch╞░a c├│ ai ghi ─Сiс╗Гm.",
            noPermissionReset: "тЪая╕П | Bс║бn kh├┤ng c├│ quyс╗Бn ─Сс║╖t lс║бi bс║гng xс║┐p hс║бng.",
            notFoundUser: "тЪая╕П | Kh├┤ng t├мm thс║еy ng╞░с╗Эi d├╣ng vс╗Ыi id %1 trong bс║гng xс║┐p hс║бng.",
            userRankInfo: "ЁЯПЖ | Th├┤ng tin xс║┐p hс║бng:\nT├кn: %1\n─Рiс╗Гm: %2\nSс╗С lс║зn ch╞бi: %3\nSс╗С lс║зn thс║пng: %4\n%5\nSс╗С lс║зn thua: %6\nTс╗╖ lс╗З thс║пng: %7%\nTс╗Хng thс╗Эi gian ch╞бi: %8",
            digits: "%1 chс╗п sс╗С: %2",
            resetRankSuccess: "тЬЕ | ─Рс║╖t lс║бi bс║гng xс║┐p hс║бng th├аnh c├┤ng.",
            invalidCol: "тЪая╕П | Vui l├▓ng nhс║нp sс╗С chс╗п sс╗С cс║зn ─Сo├бn l├а 4, 5 hoс║╖c 6.",
            invalidMode: "тЪая╕П | Vui l├▓ng nhс║нp chс║┐ ─Сс╗Щ ch╞бi l├а single hoс║╖c multi.",
            created: "тЬЕ | Tс║бo tr├▓ ch╞бi th├аnh c├┤ng!",
            gameName: "TR├Т CH╞аI ─РO├БN Sс╗Р",
            gameGuide: "тП│ | H╞░с╗Ыng dс║лn:\nBс║бn c├│ %1 lс║зn ─Сo├бn sс╗С %2 chс╗п sс╗С.\nSau mс╗Чi lс║зn ─Сo├бn, bс║бn sс║╜ nhс║нn ─С╞░с╗гc gс╗гi ├╜:\n- Sс╗С chс╗п sс╗С ─С├║ng: Tс╗Хng sс╗С chс╗п sс╗С c├│ trong ─С├бp ├бn.\n- Sс╗С chс╗п sс╗С ─С├║ng vс╗Л tr├н: Sс╗С chс╗п sс╗С ─С├║ng v├а с╗Я ─С├║ng vс╗Л tr├н.",
            gameNote: "ЁЯУД | L╞░u ├╜: Sс╗С ─С╞░с╗гc tс║бo tс╗л 0-9, mс╗Чi chс╗п sс╗С chс╗Й xuс║еt hiс╗Зn mс╗Щt lс║зn, c├│ thс╗Г bс║пt ─Сс║зu bс║▒ng 0.",
            replyToPlayGame: "ЁЯОо | Trс║г lс╗Эi tin nhс║пn n├аy vс╗Ыi %1 chс╗п sс╗С bс║бn ─Сo├бn (v├н dс╗е: 1234).",
            invalidNumbers: "тЪая╕П | Vui l├▓ng nhс║нp ─С├║ng %1 chс╗п sс╗С (0-9, kh├┤ng tr├╣ng lс║╖p).",
            guessFeedback: "Lс║зn ─Сo├бn %1: %2\n- %3 chс╗п sс╗С ─С├║ng\n- %4 chс╗п sс╗С ─С├║ng vс╗Л tr├н\nC├▓n %5 lс║зn ─Сo├бn.",
            win: "ЁЯОЙ | Ch├║c mс╗лng bс║бn ─Сo├бn ─С├║ng sс╗С %1 sau %2 lс║зn ─Сo├бn! Bс║бn nhс║нn %3 ─Сiс╗Гm th╞░с╗Яng.",
            loss: "ЁЯджтАНтЩВя╕П | Bс║бn ─С├г hс║┐t l╞░с╗гt ─Сo├бn. Sс╗С ─С├║ng l├а %1."
        },
        en: {
            charts: "ЁЯПЖ | Ranking:\n%1",
            pageInfo: "Page %1/%2",
            noScore: "тнХ | No one has scored yet.",
            noPermissionReset: "тЪая╕П | You don't have permission to reset the ranking.",
            notFoundUser: "тЪая╕П | User with id %1 not found in the ranking.",
            userRankInfo: "ЁЯПЖ | Ranking info:\nName: %1\nPoints: %2\nGames played: %3\nWins: %4\n%5\nLosses: %6\nWin rate: %7%\nTotal play time: %8",
            digits: "%1 digits: %2",
            resetRankSuccess: "тЬЕ | Ranking reset successfully.",
            invalidCol: "тЪая╕П | Please enter the number of digits to guess (4, 5, or 6).",
            invalidMode: "тЪая╕П | Please enter game mode as single or multi.",
            created: "тЬЕ | Game created successfully!",
            gameName: "GUESS NUMBER GAME",
            gameGuide: "тП│ | How to play:\nYou have %1 tries to guess a %2-digit number.\nAfter each guess, you'll get hints:\n- Correct digits: Total digits present in the answer.\n- Correct positions: Digits that are correct and in the right position.",
            gameNote: "ЁЯУД | Note: The number is made of digits 0-9, each used once, and can start with 0.",
            replyToPlayGame: "ЁЯОо | Reply to this message with your %1-digit guess (e.g., 1234).",
            invalidNumbers: "тЪая╕П | Please enter exactly %1 digits (0-9, no duplicates).",
            guessFeedback: "Guess %1: %2\n- %3 correct digits\n- %4 in correct positions\n%5 tries left.",
            win: "ЁЯОЙ | Congratulations! You guessed %1 in %2 tries and earned %3 points!",
            loss: "ЁЯджтАНтЩВя╕П | You're out of tries. The correct number was %1."
        },
        bn: {
            charts: "ЁЯПЖ | рж░тАМрзНржпрж╛ржЩрзНржХрж┐ржВ:\n%1",
            pageInfo: "ржкрзГрж╖рзНржарж╛ %1/%2",
            noScore: "тнХ | ржПржЦржиржУ ржХрзЗржЙ рж╕рзНржХрзЛрж░ ржХрж░рзЗржирж┐ред",
            noPermissionReset: "тЪая╕П | ржЖржкржирж╛рж░ рж░тАМрзНржпрж╛ржЩрзНржХрж┐ржВ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗред",
            notFoundUser: "тЪая╕П | %1 ржЖржЗржбрж┐ рж╕рж╣ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж░тАМрзНржпрж╛ржЩрзНржХрж┐ржВржпрж╝рзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред",
            userRankInfo: "ЁЯПЖ | рж░тАМрзНржпрж╛ржЩрзНржХрж┐ржВ рждржерзНржп:\nржирж╛ржо: %1\nржкржпрж╝рзЗржирзНржЯ: %2\nржЦрзЗрж▓рж╛рж░ рж╕ржВржЦрзНржпрж╛: %3\nржЬржпрж╝: %4\n%5\nрж╣рж╛рж░: %6\nржЬржпрж╝рзЗрж░ рж╣рж╛рж░: %7%\nржорзЛржЯ ржЦрзЗрж▓рж╛рж░ рж╕ржоржпрж╝: %8",
            digits: "%1 ржЕржЩрзНржХ: %2",
            resetRankSuccess: "тЬЕ | рж░тАМрзНржпрж╛ржЩрзНржХрж┐ржВ рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред",
            invalidCol: "тЪая╕П | ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржирзБржорж╛ржи ржХрж░рж╛рж░ ржЕржЩрзНржХрзЗрж░ рж╕ржВржЦрзНржпрж╛ 4, 5 ржмрж╛ 6 рж▓рж┐ржЦрзБржиред",
            invalidMode: "тЪая╕П | ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЦрзЗрж▓рж╛рж░ ржорзЛржб single ржмрж╛ multi рж▓рж┐ржЦрзБржиред",
            created: "тЬЕ | ржЦрзЗрж▓рж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ!",
            gameName: "рж╕ржВржЦрзНржпрж╛ ржЕржирзБржорж╛ржи ржЦрзЗрж▓рж╛",
            gameGuide: "тП│ | ржХрзАржнрж╛ржмрзЗ ржЦрзЗрж▓ржмрзЗржи:\nржЖржкржирж╛рж░ ржЖржЫрзЗ %1 ржмрж╛рж░ ржПржХржЯрж┐ %2-ржЕржЩрзНржХрзЗрж░ рж╕ржВржЦрзНржпрж╛ ржЕржирзБржорж╛ржи ржХрж░рж╛рж░ ржЬржирзНржпред\nржкрзНрж░рждрж┐ржЯрж┐ ржЕржирзБржорж╛ржирзЗрж░ ржкрж░рзЗ, ржЖржкржирж┐ ржЗржЩрзНржЧрж┐ржд ржкрж╛ржмрзЗржи:\n- рж╕ржарж┐ржХ ржЕржЩрзНржХ: ржЙрждрзНрждрж░рзЗ ржЙржкрж╕рзНржерж┐ржд ржорзЛржЯ ржЕржЩрзНржХред\n- рж╕ржарж┐ржХ ржЕржмрж╕рзНржерж╛ржи: рж╕ржарж┐ржХ ржПржмржВ рж╕ржарж┐ржХ ржЕржмрж╕рзНржерж╛ржирзЗ ржерж╛ржХрж╛ ржЕржЩрзНржХред",
            gameNote: "ЁЯУД | ржирзЛржЯ: рж╕ржВржЦрзНржпрж╛ржЯрж┐ 0-9 ржЕржЩрзНржХ ржжрж┐ржпрж╝рзЗ рждрзИрж░рж┐, ржкрзНрж░рждрж┐ржЯрж┐ ржЕржЩрзНржХ ржПржХржмрж╛рж░ ржмрзНржпржмрж╣рзГржд, ржПржмржВ 0 ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ рж╣рждрзЗ ржкрж╛рж░рзЗред",
            replyToPlayGame: "ЁЯОо | ржПржЗ ржмрж╛рж░рзНрждрж╛рж░ ржЙрждрзНрждрж░рзЗ ржЖржкржирж╛рж░ %1-ржЕржЩрзНржХрзЗрж░ ржЕржирзБржорж╛ржи ржжрж┐ржи (ржпрзЗржоржи, 1234)ред",
            invalidNumbers: "тЪая╕П | ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржарж┐ржХ %1 ржЕржЩрзНржХ рж▓рж┐ржЦрзБржи (0-9, ржХрзЛржирзЛ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ ржирзЗржЗ)ред",
            guessFeedback: "ржЕржирзБржорж╛ржи %1: %2\n- %3ржЯрж┐ рж╕ржарж┐ржХ ржЕржЩрзНржХ\n- %4ржЯрж┐ рж╕ржарж┐ржХ ржЕржмрж╕рзНржерж╛ржирзЗ\n%5 ржмрж╛рж░ ржмрж╛ржХрж┐ред",
            win: "ЁЯОЙ | ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж┐ %2 ржмрж╛рж░рзЗ %1 ржЕржирзБржорж╛ржи ржХрж░рзЗржЫрзЗржи ржПржмржВ %3 ржкржпрж╝рзЗржирзНржЯ ржкрзЗржпрж╝рзЗржЫрзЗржи!",
            loss: "ЁЯджтАНтЩВя╕П | ржЖржкржирж╛рж░ ржЕржирзБржорж╛ржирзЗрж░ рж╕рзБржпрзЛржЧ рж╢рзЗрж╖ред рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ ржЫрж┐рж▓ %1ред"
        }
    },

    onStart: async function ({ message, event, getLang, commandName, args, globalData, usersData, role }) {
        try {
            if (args[0] === "rank") {
                const rankGuessNumber = await globalData.get("rankGuessNumber", "data", []);
                if (!rankGuessNumber.length) {
                    return message.reply(getLang("noScore"));
                }

                const page = parseInt(args[1]) || 1;
                const maxUserOnePage = 30;

                let rankGuessNumberHandle = await Promise.all(
                    rankGuessNumber.slice((page - 1) * maxUserOnePage, page * maxUserOnePage).map(async (item) => {
                        const userName = await usersData.getName(item.id);
                        return {
                            ...item,
                            userName,
                            winNumber: item.wins?.length || 0,
                            lossNumber: item.losses?.length || 0
                        };
                    })
                );

                rankGuessNumberHandle = rankGuessNumberHandle.sort((a, b) => b.winNumber - a.winNumber);
                const medals = ["ЁЯеЗ", "ЁЯеИ", "ЁЯеЙ"];
                const rankGuessNumberText = rankGuessNumberHandle
                    .map((item, index) => {
                        const medal = medals[index] || index + 1;
                        return `${medal} ${item.userName} - ${item.winNumber} wins - ${item.lossNumber} losses`;
                    })
                    .join("\n");

                return message.reply(
                    getLang("charts", rankGuessNumberText || getLang("noScore")) +
                    "\n" +
                    getLang("pageInfo", page, Math.ceil(rankGuessNumber.length / maxUserOnePage))
                );
            } else if (args[0] === "info") {
                const rankGuessNumber = await globalData.get("rankGuessNumber", "data", []);
                let targetID;
                if (Object.keys(event.mentions).length) {
                    targetID = Object.keys(event.mentions)[0];
                } else if (event.messageReply) {
                    targetID = event.messageReply.senderID;
                } else if (!isNaN(args[1])) {
                    targetID = args[1];
                } else {
                    targetID = event.senderID;
                }

                const userDataGuessNumber = rankGuessNumber.find((item) => item.id == targetID);
                if (!userDataGuessNumber) {
                    return message.reply(getLang("notFoundUser", targetID));
                }

                const userName = await usersData.getName(targetID);
                const pointsReceived = userDataGuessNumber.points || 0;
                const winNumber = userDataGuessNumber.wins?.length || 0;
                const playNumber = winNumber + (userDataGuessNumber.losses?.length || 0);
                const lossNumber = userDataGuessNumber.losses?.length || 0;
                const winRate = playNumber > 0 ? (winNumber / playNumber * 100).toFixed(2) : 0;
                const winInfo = {};
                for (const item of userDataGuessNumber.wins || []) {
                    winInfo[item.col] = (winInfo[item.col] || 0) + 1;
                }
                const playTime = convertTime(
                    (userDataGuessNumber.wins || []).reduce((a, b) => a + (b.timeSuccess || 0), 0) +
                    (userDataGuessNumber.losses || []).reduce((a, b) => a + (b.timeSuccess || 0), 0)
                );

                return message.reply(
                    getLang(
                        "userRankInfo",
                        userName,
                        pointsReceived,
                        playNumber,
                        winNumber,
                        Object.keys(winInfo)
                            .map((item) => `  + ${getLang("digits", item, winInfo[item])}`)
                            .join("\n"),
                        lossNumber,
                        winRate,
                        playTime
                    )
                );
            } else if (args[0] === "reset") {
                if (role < 2) {
                    return message.reply(getLang("noPermissionReset"));
                }
                await globalData.set("rankGuessNumber", [], "data");
                return message.reply(getLang("resetRankSuccess"));
            }

            const col = parseInt(args.join(" ").match(/(\d+)/)?.[1] || 4);
            const levelOfDifficult = rows.find((item) => item.col === col);
            if (!levelOfDifficult) {
                return message.reply(getLang("invalidCol"));
            }
            const mode = args.join(" ").match(/(single|multi|-s|-m)/)?.[1] || "single";
            const row = levelOfDifficult.row || 10;

            const options = {
                col,
                row,
                timeStart: parseInt(getTime("x")),
                numbers: [],
                tryNumber: 0,
                answer: randomString(col, true, "0123456789"),
                gameName: getLang("gameName"),
                gameGuide: getLang("gameGuide", row, col),
                gameNote: getLang("gameNote"),
                allGuesses: []
            };

            const gameData = {
                ...options,
                mode
            };

            const messageData = await message.reply(
                `${getLang("created")}\n\n${getLang("gameGuide", row, col)}\n\n${getLang("gameNote")}\n\n${getLang("replyToPlayGame", col)}`
            );
            gameData.messageData = messageData;

            global.GoatBot.onReply.set(messageData.messageID, {
                commandName,
                messageID: messageData.messageID,
                author: event.senderID,
                gameData
            });
        } catch (error) {
            console.error("Error in onStart:", error);
            return message.reply("тЪая╕П | An error occurred while starting the game. Please try again.");
        }
    },

    onReply: async ({ message, Reply, event, getLang, commandName, globalData }) => {
        try {
            const { gameData: oldGameData } = Reply;
            if (event.senderID != Reply.author && oldGameData.mode === "single") {
                return;
            }

            const numbers = (event.body || "")
                .split("")
                .map((item) => item.trim())
                .filter((item) => item !== "" && !isNaN(item));
            if (numbers.length !== oldGameData.col || new Set(numbers).size !== numbers.length) {
                return message.reply(getLang("invalidNumbers", oldGameData.col));
            }

            global.GoatBot.onReply.delete(Reply.messageID);

            oldGameData.numbers = numbers;
            oldGameData.tryNumber += 1;
            oldGameData.allGuesses.push(numbers.join(""));

            const { correctDigits, correctPositions } = calculateHints(numbers, oldGameData.answer.split(""));
            const isWin = correctPositions === oldGameData.col;
            const isGameOver = isWin || oldGameData.tryNumber >= oldGameData.row;

            let replyMessage;
            if (!isGameOver) {
                replyMessage = getLang(
                    "guessFeedback",
                    oldGameData.tryNumber,
                    numbers.join(""),
                    correctDigits,
                    correctPositions,
                    oldGameData.row - oldGameData.tryNumber
                ) + `\n\n${getLang("replyToPlayGame", oldGameData.col)}`;
            } else {
                const rewardPoint = rows.find((item) => item.col === oldGameData.col)?.rewardPoint || 0;
                replyMessage = isWin
                    ? getLang("win", oldGameData.answer, oldGameData.tryNumber, rewardPoint)
                    : getLang("loss", oldGameData.answer);
                replyMessage += `\n\nPrevious guesses:\n${oldGameData.allGuesses
                    .map((guess, i) => {
                        const { correctDigits, correctPositions } = calculateHints(guess.split(""), oldGameData.answer.split(""));
                        return `${i + 1}. ${guess} (${correctDigits} correct, ${correctPositions} in correct position)`;
                    })
                    .join("\n")}`;
            }

            const newMessage = await message.reply(replyMessage);

            if (isGameOver) {
                const rankGuessNumber = await globalData.get("rankGuessNumber", "data", []);
                const userIndex = rankGuessNumber.findIndex((item) => item.id == event.senderID);
                const data = {
                    timeSuccess: parseInt(getTime("x") - oldGameData.timeStart),
                    date: getTime(),
                    col: oldGameData.col
                };

                if (isWin) {
                    data.tryNumber = oldGameData.tryNumber;
                    if (userIndex === -1) {
                        rankGuessNumber.push({
                            id: event.senderID,
                            wins: [data],
                            losses: [],
                            points: rewardPoint
                        });
                    } else {
                        rankGuessNumber[userIndex].wins = rankGuessNumber[userIndex].wins || [];
                        rankGuessNumber[userIndex].wins.push(data);
                        rankGuessNumber[userIndex].points = (rankGuessNumber[userIndex].points || 0) + rewardPoint;
                    }
                } else {
                    if (userIndex === -1) {
                        rankGuessNumber.push({
                            id: event.senderID,
                            wins: [],
                            losses: [data],
                            points: 0
                        });
                    } else {
                        rankGuessNumber[userIndex].losses = rankGuessNumber[userIndex].losses || [];
                        rankGuessNumber[userIndex].losses.push(data);
                    }
                }

                await globalData.set("rankGuessNumber", rankGuessNumber, "data");
                message.unsend((await oldGameData.messageData).messageID);
                message.unsend(Reply.messageID);
            } else {
                global.GoatBot.onReply.set(newMessage.messageID, {
                    commandName,
                    messageID: newMessage.messageID,
                    author: event.senderID,
                    gameData: oldGameData
                });
                message.unsend(Reply.messageID);
            }
        } catch (error) {
            console.error("Error in onReply:", error);
            return message.reply("тЪая╕П | An error occurred while processing your guess. Please try again.");
        }
    }
};

function calculateHints(guess, answer) {
    let correctDigits = 0; // Total correct digits (bulls + cows)
    let correctPositions = 0; // Bulls: correct digit in correct position

    for (let i = 0; i < guess.length; i++) {
        if (guess[i] === answer[i]) {
            correctPositions++;
            correctDigits++;
        } else if (answer.includes(guess[i])) {
            correctDigits++;
        }
    }

    return { correctDigits, correctPositions };
}
