const fs = require('fs').promises;
const path = require('path');

module.exports = {
  config: {
    name: "virusinfo",
    author: "ùêÄùê¨ùê¢ùêü ùêåùêöùê°ùê¶ùêÆùêù",
    version: "2.1",
    countDown: 5,
    role: 2,
    category: "admin",
    shortDescription: {
      en: "Mass update meta fields in all command files automatically"
    },
    longDescription: {
      en: "Set version, author, role, category, etc. to all bot command files easily."
    },
    guide: {
      en: "{pn} [credits] [category] [version] [longDesc] [shortDesc] [author] [role] [hasPermission] [usePrefix]"
    }
  },

  onStart: async function ({ api, event, args }) {
    const commandsPath = path.join(__dirname, '..');
    const backupFolder = path.join(commandsPath, 'backup_' + Date.now());

    try {
      // ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶®
      const newCredits = args[0] || "ùêÄùê¨ùê¢ùêü ùêåùêöùê°ùê¶ùêÆùêù";
      const newCategory = args[1] || "admin";
      const newVersion = args[2] || "2.1";
      const newLongDescription = args[3] || "Set version, author, role, category, etc. to all bot command files easily.";
      const newShortDescription = args[4] || "Mass update meta fields in all command files automatically";
      const newAuthor = args[5] || "ùêÄùê¨ùê¢ùêü ùêåùêöùê°ùê¶ùêÆùêù";
      const newRole = parseInt(args[6]) || 2;
      const newHasPermission = args[7] || "";
      const newUsePrefix = args[8] === "true";

      if (!/^\d+\.\d+$/.test(newVersion)) return api.sendMessage("‚ùå Version must be like 2.1", event.threadID);
      if (args[6] && isNaN(newRole)) return api.sendMessage("‚ùå Role must be a number", event.threadID);

      // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø
      await fs.mkdir(backupFolder, { recursive: true });

      // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶∏‡¶æ
      const files = await fs.readdir(commandsPath);
      const jsFiles = files.filter(f => f.endsWith('.js'));

      // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶®‡ßá‡ßü‡¶æ
      for (const file of jsFiles) {
        await fs.copyFile(path.join(commandsPath, file), path.join(backupFolder, file));
      }

      // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∞‡ßá‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®
      for (const file of jsFiles) {
        const filePath = path.join(commandsPath, file);
        let content = await fs.readFile(filePath, 'utf8');

        content = content
          .replace(/version:\s*".*?"/g, `version: "${newVersion}"`)
          .replace(/author:\s*".*?"/g, `author: "${newAuthor}"`)
          .replace(/category:\s*".*?"/g, `category: "${newCategory}"`)
          .replace(/role:\s*\d+/g, `role: ${newRole}`)
          .replace(/shortDescription:\s*\{[^}]*\}/g, `shortDescription: { en: "${newShortDescription}" }`)
          .replace(/longDescription:\s*\{[^}]*\}/g, `longDescription: { en: "${newLongDescription}" }`);

        if (/credits:\s*".*?"/g.test(content)) {
          content = content.replace(/credits:\s*".*?"/g, `credits: "${newCredits}"`);
        } else {
          content = content.replace(/config:\s*\{/, `config: {\n    credits: "${newCredits}",`);
        }

        if (/hasPermission:\s*".*?"/g.test(content)) {
          content = content.replace(/hasPermission:\s*".*?"/g, `hasPermission: "${newHasPermission}"`);
        } else {
          content = content.replace(/config:\s*\{/, `config: {\n    hasPermission: "${newHasPermission}",`);
        }

        if (/usePrefix:\s*(true|false)/g.test(content)) {
          content = content.replace(/usePrefix:\s*(true|false)/g, `usePrefix: ${newUsePrefix}`);
        } else {
          content = content.replace(/config:\s*\{/, `config: {\n    usePrefix: ${newUsePrefix},`);
        }

        await fs.writeFile(filePath, content, 'utf8');
      }

      // mature tone + typing animation message
      const matureMessage = `
‚ú®üñ§ *VirusInfo ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£!* üñ§‚ú®

üìå *Version:* ${newVersion}  
‚úçÔ∏è *Author:* ${newAuthor}  
üìÇ *Category:* ${newCategory}  
üîë *Role:* ${newRole}  

‚úÖ ‡¶∏‡¶¨ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§  
üîí *‡¶∏‡¶æ‡¶¨‡¶ß‡¶æ‡¶®:* ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßá ‡¶™‡ßÅ‡¶®‡¶∞‡ßÅ‡¶¶‡ßç‡¶ß‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡•§

üïäÔ∏è ‡¶¨‡¶ü ‡¶ß‡ßÄ‡¶∞‡ßá ‡¶ß‡ßÄ‡¶∞‡ßá ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡¶õ‡ßá...  
‚åõÔ∏è *‡¶∏‡¶æ‡¶¨‡¶≤‡ßÄ‡¶≤‡¶§‡¶æ ‡¶¨‡¶ú‡¶æ‡ßü ‡¶∞‡ßá‡¶ñ‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ö‡¶≤‡¶õ‡ßá...*

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  
üí° *‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü‡¶ï‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ‡ßü ‡¶ö‡¶æ‡¶≤‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶®!*  
üôè ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶∏‡ßç‡¶•‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§  
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  

üí¨ *‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø* \`{pn} help\` *‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§*  
üåπ ‡¶∏‡ßÅ‡¶∏‡ßç‡¶• ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®, ‡¶≠‡¶æ‡¶≤‡ßã ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®‡•§  
`;

      async function typeWrite(text, interval = 30) {
        await api.sendTyping(event.threadID);
        await new Promise(r => setTimeout(r, 1800));
        return api.sendMessage(text, event.threadID);
      }

      await typeWrite(matureMessage);

    } catch (error) {
      console.error("‚ùå Error during update:", error);
      api.sendMessage("‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶ï‡¶®‡¶∏‡ßã‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID);
    }
  }
};
