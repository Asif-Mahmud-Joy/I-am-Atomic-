const axios = require("axios");

module.exports = {
  config: {
    name: "short",
    version: "1.1",
    author: "Mr.Smokey [Asif Mahmud]",
    role: 0,
    shortDescription: {
      en: "Shorten a URL using TinyUtils",
      bn: "URL ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡ßã TinyUtils ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá",
      bd: "Link choto koro TinyUtils diye"
    },
    longDescription: {
      en: "This command allows you to shorten a URL using TinyUtils.",
      bn: "‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã URL ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã‡•§",
      bd: "Ei command diye link choto kora jai."
    },
    category: "utility",
    guide: {
      en: "{pn} <url>",
      bn: "{pn} <url> ‡¶≤‡¶ø‡¶ñ‡ßá URL ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡ßã",
      bd: "{pn} <url> diye link choto koro"
    },
  },

  onStart: async function ({ args, message }) {
    const apiKey = "127f0ad7536d10f10f877b643cad33aa932ae";

    const formatUrl = (url) => {
      if (!url.startsWith("https://") && !url.startsWith("http://")) {
        return "https://" + url;
      }
      return url;
    };

    const getErrorFromCode = (code) => {
      const errors = {
        1: "üîÅ ‡¶è‡¶á URL ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
        2: "‚ùå ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï URL ‡¶®‡¶Ø‡¶º‡•§",
        3: "‚ö†Ô∏è ‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
        4: "üö´ API ‡¶ï‡ßÄ ‡¶≠‡ßÅ‡¶≤‡•§",
        5: "üß© URL-‡¶è ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá‡•§",
        6: "üö∑ URL ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶•‡ßá‡¶ï‡ßá‡•§"
      };
      return errors[code] || "‚ùì ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§";
    };

    const shortenUrl = async (apiKey, longUrl) => {
      try {
        const apiUrl = `https://cutt.ly/api/api.php?key=${apiKey}&short=${longUrl}`;
        const res = await axios.get(apiUrl);

        if (res.data.url.status === 7) {
          return message.reply(`‚úÖ Short link: ${res.data.url.shortLink}`);
        } else {
          return message.reply(getErrorFromCode(res.data.url.status));
        }
      } catch (err) {
        return message.reply(`‚ùó‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶É ${err.message}`);
      }
    };

    if (args.length >= 1) {
      return shortenUrl(apiKey, formatUrl(args[0]));
    } else {
      return message.reply("‚ÑπÔ∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø URL ‡¶¶‡¶ø‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú reply ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø URL ‡¶Ü‡¶õ‡ßá‡•§");
    }
  }
};
