const fs = require('fs-extra');
const path = require('path');
const lockfile = require('proper-lockfile');

// ЁЯФР Atomic Constants
const LOG_PATH = path.join(__dirname, 'logs');
const LOG_FILE = path.join(LOG_PATH, 'nsfw_atomic.log');
const MAX_LOG_SIZE = 5 * 1024 * 1024; // 5MB
const DATA_DIR = path.join(__dirname, 'assist_json');
const APPROVED_PATH = path.join(DATA_DIR, 'approved_ids.json');
const PENDING_PATH = path.join(DATA_DIR, 'pending_ids.json');

// тЪЫя╕П Atomic Logger
class AtomicLogger {
  static async rotate() {
    try {
      await fs.ensureDir(LOG_PATH);
      if (await fs.pathExists(LOG_FILE)) {
        const { size } = await fs.stat(LOG_FILE);
        if (size >= MAX_LOG_SIZE) {
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          await fs.rename(LOG_FILE, path.join(LOG_PATH, `nsfw-${timestamp}.log`));
        }
      }
    } catch (err) {
      console.error('ЁЯЫС [ATOMIC LOG ROTATION FAILURE]', err);
    }
  }

  static async log(action, id, user, text = '') {
    try {
      await this.rotate();
      const entry = `[${new Date().toISOString()}] тЪЫя╕П ${action} ┬╗ ЁЯСд ${user} ┬╗ ЁЯТм ${text} ┬╗ ЁЯЖФ ${id}\n`;
      await fs.appendFile(LOG_FILE, entry);
    } catch (err) {
      console.error('ЁЯЫС [ATOMIC LOGGER FAILURE]', err);
    }
  }
}

// ЁЯФТ Atomic Operations
class NSFWManager {
  static isValidID(id) {
    return /^\d{5,15}$/.test(id);
  }

  static async atomicOperation(filePath, operation) {
    try {
      const release = await lockfile.lock(filePath, { retries: 3 });
      const data = await fs.readJson(filePath).catch(() => []);
      const result = await operation(data);
      await fs.writeJson(filePath, result, { spaces: 2 });
      await release();
      return result;
    } catch (err) {
      console.error('ЁЯФТ [ATOMIC OPERATION FAILURE]', err);
      throw new Error('Database operation failed');
    }
  }
}

// тЬи UI Components
const AtomicUI = {
  header: "тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ\nтХС   ЁЯФЮ NSFW ATOMIC SYSTEM   тХС\nтХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ",
  divider: "тЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦм",
  
  commandList: [
    "тЪЩя╕П  Command Syntax:",
    `${" ".repeat(4)}ЁЯФ╣ nsfw approved <ID> [ржорзЗрж╕рзЗржЬ]`,
    `${" ".repeat(4)}ЁЯФ╣ nsfw remove <ID> [ржХрж╛рж░ржг]`,
    `${" ".repeat(4)}ЁЯФ╣ nsfw disapproved <ID> [ржХрж╛рж░ржг]`,
    `${" ".repeat(4)}ЁЯФ╣ nsfw check`,
    `${" ".repeat(4)}ЁЯФ╣ nsfw list-approved`,
    `${" ".repeat(4)}ЁЯФ╣ nsfw list-pending`
  ].join("\n"),
  
  formatList(items, title, emoji) {
    let output = `${title}\n${this.divider}\n`;
    items.forEach((id, i) => {
      output += `\n${emoji} ${i + 1}. ЁЯЖФ ${id}`;
    });
    return `${output}\n\nЁЯФв ржорзЛржЯ: ${items.length} ржЖржЗржЯрзЗржо`;
  }
};

module.exports = {
  config: {
    name: "nsfwmanage",
    version: "3.0",
    author: "ЁЭРАЁЭРмЁЭРвЁЭРЯ ЁЭРМЁЭРЪЁЭРбЁЭРжЁЭРоЁЭРЭ",
    countDown: 3,
    category: "ЁЯФЮ NSFW",
    role: 2,
    shortDescription: {
      en: "тШвя╕П Atomic NSFW Access Control"
    }
  },

  onStart: async function ({ api, args, message, event }) {
    const { threadID, senderID } = event;
    
    // ЁЯФР Authorization Check
    if (event.author?.role < 2) {
      return message.reply("тЫФ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржбрж┐ржирж╛ржЗржб! ржЖржкржирж╛рж░ ржкрж░рзНржпрж╛ржкрзНржд ржЕржирзБржорждрж┐ ржирзЗржЗред");
    }

    // тП│ Typing Indicator
    api.sendTyping(threadID);

    try {
      // ЁЯЧВя╕П Initialize Data Directories
      await fs.ensureDir(DATA_DIR);
      if (!await fs.pathExists(APPROVED_PATH)) await fs.writeJson(APPROVED_PATH, []);
      if (!await fs.pathExists(PENDING_PATH)) await fs.writeJson(PENDING_PATH, []);

      // ЁЯУж Load Atomic Data
      const [approvedIDs, pendingIDs] = await Promise.all([
        fs.readJson(APPROVED_PATH).catch(() => []),
        fs.readJson(PENDING_PATH).catch(() => [])
      ]);

      const [subCommand, idArg] = args;
      const textArg = args.slice(2).join(" ") || "ржХрзЛржирзЛ ржмрж╛рж░рзНрждрж╛ ржирзЗржЗред";

      // ЁЯЫбя╕П Input Validation
      if (idArg && !NSFWManager.isValidID(idArg)) {
        return message.reply("тЪая╕П ржЕржмрзИржз ржЖржЗржбрж┐ ржлрж░ржорзНржпрж╛ржЯ! рзл-рззрзл рж╕ржВржЦрзНржпрж╛рж░ ржоржзрзНржпрзЗ ржжрж┐ржиред");
      }

      // тЪЫя╕П Command Processing
      switch (subCommand) {
        case "approved": {
          if (!idArg) return message.reply("тЭЧ ржЖржЗржбрж┐ ржкрзНрж░ржпрж╝рзЛржЬржи:\n\nUsage: nsfw approved <ID> [ржорзЗрж╕рзЗржЬ]");
          if (approvedIDs.includes(idArg)) {
            return message.reply("тД╣я╕П ржПржЗ ржЖржЗржбрж┐ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржЕржирзБржорзЛржжрж┐ржд!");
          }

          await NSFWManager.atomicOperation(APPROVED_PATH, data => [...data, idArg]);
          await NSFWManager.atomicOperation(PENDING_PATH, data => data.filter(id => id !== idArg));

          await api.sendMessage(
            `ЁЯОЙ ржЖржкржирж╛рж░ NSFW ржЕржирзБрж░рзЛржз ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!\n\n` +
            `ЁЯФЮ ржПржЦржи ржерзЗржХрзЗ рж╕ржорж╕рзНржд NSFW ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред\n\n` +
            `ЁЯУй ржорзЗрж╕рзЗржЬ: ${textArg}`,
            idArg
          );
          
          await AtomicLogger.log("APPROVED", idArg, senderID, textArg);
          return message.reply(`тЬЕ ${idArg} рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!`);
        }

        case "remove": {
          if (!idArg) return message.reply("тЭЧ ржЖржЗржбрж┐ ржкрзНрж░ржпрж╝рзЛржЬржи:\n\nUsage: nsfw remove <ID> [ржХрж╛рж░ржг]");
          if (!approvedIDs.includes(idArg)) {
            return message.reply("тЭМ ржПржЗ ржЖржЗржбрж┐ ржЕржирзБржорзЛржжрж┐ржд ржиржпрж╝!");
          }

          await NSFWManager.atomicOperation(APPROVED_PATH, data => data.filter(id => id !== idArg));

          await api.sendMessage(
            `тЪая╕П ржЖржкржирж╛рж░ NSFW ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n` +
            `ЁЯФТ ржХрж╛рж░ржг: ${textArg}\n\n` +
            `ржЖржкржирж╛рж░ ржЖржмрж╛рж░ ржЕржирзБржорзЛржжржи ржкрзНрж░ржпрж╝рзЛржЬржи рж╣рж▓рзЗ ржирждрзБржи ржХрж░рзЗ ржЖржмрзЗржжржи ржХрж░рзБржиред`,
            idArg
          );
          
          await AtomicLogger.log("REMOVED", idArg, senderID, textArg);
          return message.reply(`ЁЯЧСя╕П ${idArg} ржерзЗржХрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕржкрж╕рж╛рж░ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!`);
        }

        case "disapproved": {
          if (!idArg) return message.reply("тЭЧ ржЖржЗржбрж┐ ржкрзНрж░ржпрж╝рзЛржЬржи:\n\nUsage: nsfw disapproved <ID> [ржХрж╛рж░ржг]");
          if (!pendingIDs.includes(idArg)) {
            return message.reply("тД╣я╕П ржПржЗ ржЖржЗржбрж┐ ржкрзЗржирзНржбрж┐ржВ рждрж╛рж▓рж┐ржХрж╛ржпрж╝ ржирзЗржЗ!");
          }

          await NSFWManager.atomicOperation(PENDING_PATH, data => data.filter(id => id !== idArg));

          await api.sendMessage(
            `тЭМ ржЖржкржирж╛рж░ NSFW ржЕржирзБрж░рзЛржз ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n` +
            `ЁЯУЭ ржХрж╛рж░ржг: ${textArg}\n\n` +
            `ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ рж╕ржВрж╢рзЛржзржи ржХрж░рзЗ ржкрзБржирж░рж╛ржпрж╝ ржЖржмрзЗржжржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред`,
            idArg
          );
          
          await AtomicLogger.log("DISAPPROVED", idArg, senderID, textArg);
          return message.reply("тЫФ ржЕржирзБрж░рзЛржз рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!");
        }

        case "check": {
          const status = approvedIDs.includes(threadID) ? 
            "тЬЕ ржПржЗ ржерзНрж░рзЗржбрзЗ NSFW ржЪрж╛рж▓рзБ ржЖржЫрзЗ! ЁЯФЮ" : 
            "тЭМ ржПржЗ ржерзНрж░рзЗржбрзЗ NSFW ржЪрж╛рж▓рзБ ржирзЗржЗ! ЁЯФТ";
          return message.reply(status);
        }

        case "list-approved": {
          if (approvedIDs.length === 0) {
            return message.reply("ЁЯУн ржХрзЛржи ржЕржирзБржорзЛржжрж┐ржд ржЖржЗржбрж┐ ржирзЗржЗ!");
          }
          return message.reply(
            AtomicUI.formatList(approvedIDs, "ЁЯУЬ ржЕржирзБржорзЛржжрж┐ржд ржЖржЗржбрж┐ рждрж╛рж▓рж┐ржХрж╛:", "ЁЯЯв")
          );
        }

        case "list-pending": {
          if (pendingIDs.length === 0) {
            return message.reply("ЁЯУн ржХрзЛржи ржкрзЗржирзНржбрж┐ржВ ржЖржЗржбрж┐ ржирзЗржЗ!");
          }
          return message.reply(
            AtomicUI.formatList(pendingIDs, "тП│ ржкрзЗржирзНржбрж┐ржВ ржЕржирзБрж░рзЛржз рждрж╛рж▓рж┐ржХрж╛:", "ЁЯЯб")
          );
        }

        default: {
          return message.reply(
            `${AtomicUI.header}\n\n` +
            `${AtomicUI.commandList}\n\n` +
            `${AtomicUI.divider}\n` +
            `тЪб Version: ${this.config.version} | тП▒я╕П Countdown: ${this.config.countDown}s`
          );
        }
      }
    } catch (error) {
      console.error("тШвя╕П [ATOMIC SYSTEM FAILURE]", error);
      await AtomicLogger.log("ERROR", threadID, senderID, error.message);
      return message.reply(
        "тЪая╕П рж╕рж┐рж╕рзНржЯрзЗржорзЗ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐!\n" +
        "ЁЯФз ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рж▓ржЧрзЗ рж░рзЗржХрж░рзНржб ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред\n" +
        "ржжржпрж╝рж╛ ржХрж░рзЗ ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
      );
    }
  }
};
