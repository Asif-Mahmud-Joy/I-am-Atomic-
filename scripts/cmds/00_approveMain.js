const fs = require('fs-extra');
const path = require('path');
const lockfile = require('proper-lockfile');

const LOG_PATH = path.join(__dirname, 'logs');
const LOG_FILE = path.join(LOG_PATH, 'nsfw.log');
const MAX_LOG_SIZE = 5 * 1024 * 1024; // 5MB

async function rotateLogIfNeeded() {
  try {
    await fs.ensureDir(LOG_PATH);
    const stats = await fs.stat(LOG_FILE).catch(() => null);
    if (stats && stats.size >= MAX_LOG_SIZE) {
      const oldLog = path.join(LOG_PATH, `nsfw_${Date.now()}.log`);
      await fs.rename(LOG_FILE, oldLog);
    }
  } catch (err) {
    console.error('ЁЯЫС рж▓ржЧ рж░рзЛржЯрзЗрж╢ржи ржПрж░рж░:', err);
  }
}

async function logMessage(text) {
  try {
    await rotateLogIfNeeded();
    await fs.appendFile(LOG_FILE, `[${new Date().toISOString()}] ${text}\n`);
  } catch (err) {
    console.error('ЁЯЫС рж▓ржЧрж┐ржВ ржПрж░рж░:', err);
  }
}

function isValidID(id) {
  return typeof id === 'string' && /^\d{5,15}$/.test(id);
}

async function safeWriteJSON(filePath, data) {
  try {
    const release = await lockfile.lock(filePath);
    await fs.writeJson(filePath, data, { spaces: 2 });
    await release();
  } catch (err) {
    console.error('ЁЯЫС ржлрж╛ржЗрж▓ рж▓ржХрж┐ржВ ржПрж░рж░:', err);
  }
}

module.exports = {
  config: {
    name: "nsfwmanage",
    version: "2.2",
    author: "ЁЭРАЁЭРмЁЭРвЁЭРЯ ЁЭРМЁЭРЪЁЭРбЁЭРжЁЭРоЁЭРЭ",
    countDown: 5,
    category: "ЁЯФЮ NSFW",
    role: 2,
    shortDescription: {
      en: "ЁЯФР Secure NSFW Access Management"
    }
  },

  onStart: async function ({ api, args, message, event }) {
    const threadID = event.threadID;
    const senderID = event.senderID;
    const assistPath = path.join(__dirname, 'assist_json');
    const approvedIDsPath = path.join(assistPath, 'approved_ids.json');
    const pendingIDsPath = path.join(assistPath, 'pending_ids.json');

    // тЬЕ рж░рзЛрж▓ ржЪрзЗржХ: рж╢рзБржзрзБржорж╛рждрзНрж░ role 2+ ржЗржЙржЬрж╛рж░рж░рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ
    if (event.author && event.author.role < 2 && senderID !== threadID) {
      return message.reply("тЪая╕П ржЖржкржирж╛рж░ ржкрж░рзНржпрж╛ржкрзНржд ржЕржирзБржорждрж┐ ржирзЗржЗ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржпред");
    }

    await fs.ensureDir(assistPath);
    if (!await fs.pathExists(approvedIDsPath)) await fs.writeJson(approvedIDsPath, []);
    if (!await fs.pathExists(pendingIDsPath)) await fs.writeJson(pendingIDsPath, []);

    let approvedIDs = [], pendingIDs = [];
    try {
      approvedIDs = await fs.readJson(approvedIDsPath);
      pendingIDs = await fs.readJson(pendingIDsPath);
    } catch {
      return message.reply("тЭМ ржбрзЗржЯрж╛ ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред");
    }

    const subCommand = args[0];
    const idArg = args[1];
    const textArg = args.slice(2).join(" ") || "ржХрзЛржирзЛ ржмрж╛рж░рзНрждрж╛ ржирзЗржЗред";

    // ЁЯЫС ржЗржиржкрзБржЯ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи: ID ржлрж░ржорзНржпрж╛ржЯ ржЪрзЗржХ
    if (idArg && !isValidID(idArg)) {
      return message.reply("тЪая╕П тЭЧ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯрзЗ ID ржжрж┐ржи (рзл-рззрзл рж╕ржВржЦрзНржпрж╛рж░ ржоржзрзНржпрзЗ)ред");
    }

    // тП│ ржЯрж╛ржЗржкрж┐ржВ ржЕрзНржпрж╛ржирж┐ржорзЗрж╢ржи ржЪрж╛рж▓рзБ
    api.sendTyping(threadID);

    try {
      switch (subCommand) {
        case "approved": {
          if (!idArg) return message.reply("тЭЧ ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ID ржжрж┐ржи:\n\nUsage: nsfw approved <ID> [ржорзЗрж╕рзЗржЬ]");
          if (approvedIDs.includes(idArg)) return message.reply("тЫФ ржПржЗ ржерзНрж░рзЗржбржЯрж┐ ржЖржЧрзЗржЗ ржЕржирзБржорзЛржжрж┐рждред");

          approvedIDs.push(idArg);
          await safeWriteJSON(approvedIDsPath, approvedIDs);

          // ржкрзЗржирзНржбрж┐ржВ ржерзЗржХрзЗ ID ржорзБржЫрзЗ ржлрзЗрж▓рзБржи
          const idx = pendingIDs.indexOf(idArg);
          if (idx !== -1) {
            pendingIDs.splice(idx, 1);
            await safeWriteJSON(pendingIDsPath, pendingIDs);
          }

          await api.sendMessage(`тЬЕ ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржз ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!\n\nЁЯФЮ NSFW ржХржорж╛ржирзНржбржЧрзБрж▓рж┐ ржПржЦржи ржерзЗржХрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред\n\nЁЯУй ржорзЗрж╕рзЗржЬ: ${textArg}`, idArg);
          await logMessage(`тЬЕ Approved ID: ${idArg} by ${senderID} | Message: ${textArg}`);
          return message.reply(`тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ ${idArg} ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред`);
        }

        case "remove": {
          if (!idArg) return message.reply("тЭЧ ржЕржкрж╕рж╛рж░ржгрзЗрж░ ржЬржирзНржп ID ржжрж┐ржи:\n\nUsage: nsfw remove <ID> [ржХрж╛рж░ржг]");
          if (!approvedIDs.includes(idArg)) return message.reply("тЭМ ржПржЗ ржерзНрж░рзЗржбржЯрж┐ ржЕржирзБржорзЛржжрж┐ржд ржиржпрж╝ред");

          approvedIDs = approvedIDs.filter(id => id !== idArg);
          await safeWriteJSON(approvedIDsPath, approvedIDs);

          await api.sendMessage(`тЪая╕П ржЖржкржирж╛рж░ NSFW ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред\n\nржХрж╛рж░ржг: ${textArg}`, idArg);
          await logMessage(`тЭМ Removed NSFW Access from ID: ${idArg} by ${senderID} | Reason: ${textArg}`);
          return message.reply(`тЭМ рж╕ржлрж▓ржнрж╛ржмрзЗ ${idArg} ржерзЗржХрзЗ NSFW ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржЕржкрж╕рж╛рж░ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред`);
        }

        case "disapproved": {
          if (!idArg) return message.reply("тЭЧ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржирзЗрж░ ржЬржирзНржп ID ржжрж┐ржи:\n\nUsage: nsfw disapproved <ID> [ржХрж╛рж░ржг]");
          if (!pendingIDs.includes(idArg)) return message.reply("тЪая╕П ржПржЗ ID ржкрзЗржирзНржбрж┐ржВ рждрж╛рж▓рж┐ржХрж╛ржпрж╝ ржирзЗржЗред");

          pendingIDs = pendingIDs.filter(id => id !== idArg);
          await safeWriteJSON(pendingIDsPath, pendingIDs);

          await api.sendMessage(`тЭМ ржЖржкржирж╛рж░ NSFW ржЕржирзБрж░рзЛржз ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржд рж╣ржпрж╝рзЗржЫрзЗред\n\nржХрж╛рж░ржг: ${textArg}`, idArg);
          await logMessage(`тЭМ Disapproved NSFW request from ID: ${idArg} by ${senderID} | Reason: ${textArg}`);
          return message.reply("тЬЕ NSFW ржЕржирзБрж░рзЛржз рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржд рж╣ржпрж╝рзЗржЫрзЗред");
        }

        case "check": {
          return message.reply(
            approvedIDs.includes(threadID)
              ? "тЬЕ ржПржЗ ржерзНрж░рзЗржбрзЗ NSFW ржЪрж╛рж▓рзБ ржЖржЫрзЗред ЁЯФЮ"
              : "тЭМ ржПржЗ ржерзНрж░рзЗржбрзЗ NSFW ржЪрж╛рж▓рзБ ржирзЗржЗред ЁЯЪл"
          );
        }

        case "list-approved": {
          if (approvedIDs.length === 0) return message.reply("тЭМ ржХрзЛржи ржЕржирзБржорзЛржжрж┐ржд ржерзНрж░рзЗржб ржирзЗржЗред");

          let replyMsg = "тЬЕ ржЕржирзБржорзЛржжрж┐ржд ржерзНрж░рзЗржбрж╕ржорзВрж╣:\n\n";
          approvedIDs.forEach((id, i) => {
            replyMsg += `ЁЯФ╣ ${i + 1}. ID: ${id}\n`;
          });
          return message.reply(replyMsg);
        }

        case "list-pending": {
          if (pendingIDs.length === 0) return message.reply("тЭМ ржХрзЛржи ржкрзЗржирзНржбрж┐ржВ ржерзНрж░рзЗржб ржирзЗржЗред");

          let replyMsg = "тП│ ржкрзЗржирзНржбрж┐ржВ ржерзНрж░рзЗржбрж╕ржорзВрж╣:\n\n";
          pendingIDs.forEach((id, i) => {
            replyMsg += `ЁЯФ╕ ${i + 1}. ID: ${id}\n`;
          });
          return message.reply(replyMsg);
        }

        default:
          return message.reply(
            `тЪая╕П ржЕржмрзИржз ржХржорж╛ржирзНржб! рж╕ржарж┐ржХ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ:\n\n` +
            `ЁЯФ╣ nsfw approved <ID> [ржорзЗрж╕рзЗржЬ]\n` +
            `ЁЯФ╣ nsfw remove <ID> [ржХрж╛рж░ржг]\n` +
            `ЁЯФ╣ nsfw disapproved <ID> [ржХрж╛рж░ржг]\n` +
            `ЁЯФ╣ nsfw check\n` +
            `ЁЯФ╣ nsfw list-approved\n` +
            `ЁЯФ╣ nsfw list-pending`
          );
      }
    } catch (error) {
      console.error("ЁЯЫС ржЕржирж╛ржХрж╛ржЩрзНржХрзНрж╖рж┐ржд рждрзНрж░рзБржЯрж┐:", error);
      return message.reply("тЭМ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ, ржжржпрж╝рж╛ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред");
    }
  }
};
