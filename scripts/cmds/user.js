const { getTime } = global.utils;

module.exports = {
  config: {
    name: "user",
    version: "2.0",
    author: "Mr.Smokey [Asif Mahmud]",
    countDown: 5,
    role: 2,
    description: {
      vi: "Qu·∫£n l√Ω ng∆∞·ªùi d√πng trong h·ªá th·ªëng bot",
      en: "Manage users in bot system",
      bn: "‡¶¨‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®"
    },
    category: "owner",
    guide: {
      vi: "   {pn} [find | -f | search | -s] <t√™n c·∫ßn t√¨m>: t√¨m ki·∫øm ng∆∞·ªùi d√πng trong d·ªØ li·ªáu bot b·∫±ng t√™n\n"
        + "\n   {pn} [ban | -b] [<uid> | @tag | reply tin nh·∫Øn] <reason>: ƒë·ªÉ c·∫•m ng∆∞·ªùi d√πng s·ª≠ d·ª•ng bot"
        + "\n   {pn} unban [<uid> | @tag | reply tin nh·∫Øn]: ƒë·ªÉ b·ªè c·∫•m",
      en: "   {pn} [find | -f | search | -s] <name>: find user\n"
        + "\n   {pn} [ban | -b] [<uid> | @tag | reply] <reason>: ban user\n"
        + "\n   {pn} unban [<uid> | @tag | reply]: unban user",
      bn: "   {pn} [find | -f | search | -s] <‡¶®‡¶æ‡¶Æ>: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®\n"
        + "\n   {pn} [ban | -b] [<uid> | @tag | ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á] <‡¶ï‡¶æ‡¶∞‡¶£>: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®\n"
        + "\n   {pn} unban [<uid> | @tag | ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á]: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"
    }
  },

  langs: {
    bn: {
      noUserFound: "‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø ‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡ßá: \"%1\"",
      userFound: "üîé ‡¶Æ‡ßã‡¶ü %1 ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá \"%2\" ‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡ßá:\n%3",
      uidRequired: "‚ùó ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®, ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó/‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      reasonRequired: "‚ùó ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
      userHasBanned: "üö´ ‡¶è‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ [%1 | %2] ‡¶Ü‡¶ó‡ßá‡¶á ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n¬ª ‡¶ï‡¶æ‡¶∞‡¶£: %3\n¬ª ‡¶∏‡¶Æ‡¶Ø‡¶º: %4",
      userBanned: "‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ [%1 | %2] ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n¬ª ‡¶ï‡¶æ‡¶∞‡¶£: %3\n¬ª ‡¶∏‡¶Æ‡¶Ø‡¶º: %4",
      uidRequiredUnban: "‚ùó ‡¶Ü‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®‡•§",
      userNotBanned: "üôÇ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ [%1 | %2] ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶®‡¶Ø‡¶º‡•§",
      userUnbanned: "üü¢ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ [%1 | %2] ‡¶Ü‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
    }
  },

  onStart: async function ({ args, usersData, message, event, getLang, prefix }) {
    const type = args[0];
    switch (type) {
      case "find":
      case "-f":
      case "search":
      case "-s": {
        const allUser = await usersData.getAll();
        const keyword = args.slice(1).join(" ");
        const result = allUser.filter(item => (item.name || "").toLowerCase().includes(keyword.toLowerCase()));
        const msg = result.reduce((text, user) => text + `\nüë§ ‡¶®‡¶æ‡¶Æ: ${user.name}\nüÜî ID: ${user.userID}`, "");
        message.reply(result.length === 0 ? getLang("noUserFound", keyword) : getLang("userFound", result.length, keyword, msg));
        break;
      }

      case "ban":
      case "-b": {
        let uid, reason;

        if (event.type === "message_reply") {
          uid = event.messageReply.senderID;
          reason = args.slice(1).join(" ");
        } else if (Object.keys(event.mentions).length > 0) {
          uid = Object.keys(event.mentions)[0];
          reason = args.slice(1).join(" ").replace(event.mentions[uid], "");
        } else if (args[1]) {
          uid = args[1];
          reason = args.slice(2).join(" ");
        } else return message.reply(getLang("uidRequired"));

        if (!reason) return message.reply(getLang("reasonRequired"));

        const userData = await usersData.get(uid);
        const name = userData.name || "Unknown";

        if (userData.banned?.status)
          return message.reply(getLang("userHasBanned", uid, name, userData.banned.reason, userData.banned.date));

        const time = getTime("DD/MM/YYYY HH:mm:ss");
        await usersData.set(uid, {
          banned: {
            status: true,
            reason,
            date: time
          }
        });

        message.reply(getLang("userBanned", uid, name, reason, time));
        break;
      }

      case "unban":
      case "-u": {
        let uid;

        if (event.type === "message_reply") {
          uid = event.messageReply.senderID;
        } else if (Object.keys(event.mentions).length > 0) {
          uid = Object.keys(event.mentions)[0];
        } else if (args[1]) {
          uid = args[1];
        } else return message.reply(getLang("uidRequiredUnban"));

        const userData = await usersData.get(uid);
        const name = userData.name || "Unknown";

        if (!userData.banned?.status)
          return message.reply(getLang("userNotBanned", uid, name));

        await usersData.set(uid, { banned: {} });
        message.reply(getLang("userUnbanned", uid, name));
        break;
      }

      default:
        return message.reply(getLang("uidRequired"));
    }
  }
};
