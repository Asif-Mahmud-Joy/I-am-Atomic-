const { drive, getStreamFromURL, getExtFromUrl, getTime } = global.utils;

module.exports = {
  config: {
    name: "setleave",
    aliases: ["setl", "leaveconfig"],
    version: "3.0.0",
    author: "NTKhang & Upgraded by ‚ú®Asif‚ú®",
    countDown: 5,
    role: 1, // Requires admin privileges
    description: {
      en: "Advanced leave message configuration system",
      vi: "H·ªá th·ªëng c·∫•u h√¨nh tin nh·∫Øn r·ªùi nh√≥m n√¢ng cao",
      bn: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ"
    },
    category: "administration",
    guide: {
      en: `üìå Command Guide:
‚Ä¢ {pn} on - Enable leave messages
‚Ä¢ {pn} off - Disable leave messages
‚Ä¢ {pn} text <message> - Set custom leave message
‚Ä¢ {pn} text reset - Reset to default message
‚Ä¢ {pn} file - Add attachment (reply with file)
‚Ä¢ {pn} file reset - Remove attachments

üîÑ Available placeholders:
- {userName} - Member's name
- {userNameTag} - Tagged member's name
- {boxName} - Group name
- {type} - "left" or "kicked"
- {session} - Time of day (morning/afternoon/evening)`,
      bn: `üìå ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ:
‚Ä¢ {pn} on - ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} off - ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} text <message> - ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} text reset - ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ‡¶Ø‡¶º ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} file - ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®)
‚Ä¢ {pn} file reset - ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶∏‡¶∞‡¶æ‡¶®

üîÑ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶™‡ßç‡¶≤‡ßá‡¶∏‡¶π‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞:
- {userName} - ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
- {userNameTag} - ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶®‡¶æ‡¶Æ
- {boxName} - ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
- {type} - "left" ‡¶¨‡¶æ "kicked"
- {session} - ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º (‡¶∏‡¶ï‡¶æ‡¶≤/‡¶¶‡ßÅ‡¶™‡ßÅ‡¶∞/‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ)`
    }
  },

  langs: {
    en: {
      turnedOn: "‚úÖ Leave messages enabled",
      turnedOff: "üö´ Leave messages disabled",
      missingContent: "‚ö†Ô∏è Please provide message content",
      edited: "‚úèÔ∏è Leave message updated:\n%1",
      reseted: "üîÑ Leave message reset to default",
      noFile: "‚ÑπÔ∏è No attachments to remove",
      resetedFile: "‚úÖ Attachments removed successfully",
      missingFile: "‚ö†Ô∏è Please reply with an image/video/audio file",
      addedFile: "üìé Added %1 attachment(s) to leave message",
      error: "‚ùå An error occurred: %1",
      help: `üìö Need help? Use '{pn} guide' for detailed instructions`
    },
    bn: {
      turnedOn: "‚úÖ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      turnedOff: "üö´ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      missingContent: "‚ö†Ô∏è ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
      edited: "‚úèÔ∏è ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n%1",
      reseted: "üîÑ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      noFile: "‚ÑπÔ∏è ‡¶∏‡¶∞‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶®‡ßá‡¶á",
      resetedFile: "‚úÖ ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      missingFile: "‚ö†Ô∏è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø/‡¶≠‡¶ø‡¶°‡¶ø‡¶ì/‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®",
      addedFile: "üìé %1 ‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      error: "‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: %1",
      help: `üìö ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®? '{pn} guide' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø`
    }
  },

  onStart: async function ({ 
    message, 
    event, 
    args, 
    threadsData, 
    getLang,
    prefix
  }) {
    try {
      const { threadID, senderID, body } = event;
      const action = args[0]?.toLowerCase();
      const lang = getLang;

      if (!action || action === "help") {
        return message.reply(lang("help").replace(/{pn}/g, prefix + this.config.name));
      }

      const { data, settings } = await threadsData.get(threadID);

      switch (action) {
        case "on":
        case "off": {
          settings.sendLeaveMessage = action === "on";
          await threadsData.set(threadID, { settings });
          return message.reply(lang(action === "on" ? "turnedOn" : "turnedOff"));
        }

        case "text": {
          const content = args.slice(1).join(" ");
          if (!content) return message.reply(lang("missingContent"));
          
          if (content === "reset") {
            delete data.leaveMessage;
          } else {
            data.leaveMessage = body.slice(body.indexOf(args[0]) + args[0].length).trim();
          }

          await threadsData.set(threadID, { data });
          return message.reply(
            data.leaveMessage ? 
              lang("edited", data.leaveMessage) : 
              lang("reseted")
          );
        }

        case "file": {
          if (args[1] === "reset") {
            if (!data.leaveAttachment) {
              return message.reply(lang("noFile"));
            }

            try {
              await Promise.all(data.leaveAttachment.map(id => drive.deleteFile(id)));
              delete data.leaveAttachment;
              await threadsData.set(threadID, { data });
              return message.reply(lang("resetedFile"));
            } catch (error) {
              console.error("Error deleting files:", error);
              return message.reply(lang("error", error.message));
            }
          }

          if (!event.attachments.length && 
              (!event.messageReply || !event.messageReply.attachments.length)) {
            return message.reply(lang("missingFile"), (err, info) => {
              global.GoatBot.onReply.set(info.messageID, {
                messageID: info.messageID,
                author: senderID,
                commandName: this.config.name
              });
            });
          }

          await this.handleFileUpload(message, event, threadID, threadsData, lang);
          break;
        }

        default: {
          return message.SyntaxError();
        }
      }
    } catch (error) {
      console.error("Error in setleave command:", error);
      return message.reply(getLang("error", error.message));
    }
  },

  onReply: async function ({ 
    event, 
    Reply, 
    message, 
    threadsData, 
    getLang 
  }) {
    try {
      if (event.senderID !== Reply.author) return;
      
      if (!event.attachments.length && 
          (!event.messageReply || !event.messageReply.attachments.length)) {
        return message.reply(getLang("missingFile"));
      }

      await this.handleFileUpload(
        message, 
        event, 
        event.threadID, 
        threadsData, 
        getLang
      );
    } catch (error) {
      console.error("Error in reply handler:", error);
      message.reply(getLang("error", error.message));
    }
  },

  handleFileUpload: async function (message, event, threadID, threadsData, lang) {
    const { data } = await threadsData.get(threadID);
    const attachments = [
      ...event.attachments,
      ...(event.messageReply?.attachments || [])
    ].filter(a => ["photo", "animated_image", "video", "audio"].includes(a.type));

    if (!data.leaveAttachment) {
      data.leaveAttachment = [];
    }

    await Promise.all(attachments.map(async (attachment) => {
      try {
        const { url } = attachment;
        const ext = getExtFromUrl(url);
        const fileName = `leave_${getTime()}.${ext}`;
        const stream = await getStreamFromURL(url);
        const infoFile = await drive.uploadFile(
          `leave_${threadID}_${event.senderID}_${fileName}`, 
          stream
        );
        data.leaveAttachment.push(infoFile.id);
      } catch (error) {
        console.error("Error uploading file:", error);
        throw error;
      }
    }));

    await threadsData.set(threadID, { data });
    return message.reply(lang("addedFile", attachments.length));
  }
};
