const { drive, getStreamFromURL, getExtFromUrl, getTime } = global.utils;

module.exports = {
	config: {
		name: "setleave",
		aliases: ["setl"],
		version: "2.0-ultra",
		author: "Mr.Smokey [Asif Mahmud]",
		countDown: 5,
		role: 0,
		description: {
			vi: "Ch·ªânh s·ª≠a n·ªôi dung/b·∫≠t/t·∫Øt tin nh·∫Øn t·∫°m bi·ªát th√†nh vi√™n r·ªùi kh·ªèi nh√≥m chat c·ªßa b·∫°n",
			en: "Edit content/turn on/off leave message when member leaves your group chat"
		},
		category: "custom",
		guide: {
			vi: {
				body: `   {pn} on: B·∫≠t tin nh·∫Øn t·∫°m bi·ªát
   {pn} off: T·∫Øt tin nh·∫Øn t·∫°m bi·ªát
   {pn} text [<n·ªôi dung> | reset]: ch·ªânh s·ª≠a ho·∫∑c reset n·ªôi dung tin nh·∫Øn
   {pn} file: th√™m file ·∫£nh/video/audio ho·∫∑c reset

Shortcut:
 + {userName} - t√™n ng∆∞·ªùi r·ªùi nh√≥m
 + {userNameTag} - tag t√™n
 + {boxName} - t√™n nh√≥m
 + {type} - r·ªùi/b·ªã x√≥a
 + {session} - bu·ªïi trong ng√†y`,
				attachment: {
					[`${__dirname}/assets/guide/setleave/setleave_vi_1.png`]: "https://i.ibb.co/2FKJHJr/guide1.png"
				}
			},
			en: {
				body: `   {pn} on: Turn on leave message
   {pn} off: Turn off leave message
   {pn} text [<content> | reset]: edit or reset message content
   {pn} file: add image/video/audio file or reset

Shortcut:
 + {userName} - member's name
 + {userNameTag} - tag name
 + {boxName} - group name
 + {type} - left/kicked
 + {session} - time of day` ,
				attachment: {
					[`${__dirname}/assets/guide/setleave/setleave_en_1.png`]: "https://i.ibb.co/2FKJHJr/guide1.png"
				}
			}
		}
	},

	langs: {
		vi: {
			turnedOn: "‚úÖ ƒê√£ b·∫≠t tin nh·∫Øn t·∫°m bi·ªát",
			turnedOff: "üö´ ƒê√£ t·∫Øt tin nh·∫Øn t·∫°m bi·ªát",
			missingContent: "‚ö†Ô∏è Nh·∫≠p n·ªôi dung tin nh·∫Øn",
			edited: "‚úèÔ∏è N·ªôi dung tin nh·∫Øn m·ªõi:\n%1",
			reseted: "üîÑ ƒê√£ reset n·ªôi dung v·ªÅ m·∫∑c ƒë·ªãnh",
			noFile: "‚ö†Ô∏è Kh√¥ng c√≥ file ƒë·ªÉ x√≥a",
			resetedFile: "‚úÖ ƒê√£ reset file th√†nh c√¥ng",
			missingFile: "‚ö†Ô∏è G·ª≠i ho·∫∑c reply k√®m file ·∫£nh/video/audio",
			addedFile: "üìé ƒê√£ th√™m %1 t·ªáp v√†o tin nh·∫Øn t·∫°m bi·ªát"
		},
		en: {
			turnedOn: "‚úÖ Leave message turned on",
			turnedOff: "üö´ Leave message turned off",
			missingContent: "‚ö†Ô∏è Please enter the message content",
			edited: "‚úèÔ∏è New leave message content:\n%1",
			reseted: "üîÑ Message content reset to default",
			noFile: "‚ö†Ô∏è No file to delete",
			resetedFile: "‚úÖ Attachment file reset successfully",
			missingFile: "‚ö†Ô∏è Send or reply with image/video/audio file",
			addedFile: "üìé %1 file(s) added to leave message"
		}
	},

	onStart: async function ({ args, threadsData, message, event, commandName, getLang }) {
		const { threadID, senderID, body } = event;
		const { data, settings } = await threadsData.get(threadID);

		switch (args[0]) {
			case "text": {
				if (!args[1]) return message.reply(getLang("missingContent"));
				if (args[1] === "reset") delete data.leaveMessage;
				else data.leaveMessage = body.slice(body.indexOf(args[0]) + args[0].length).trim();

				await threadsData.set(threadID, { data });
				return message.reply(data.leaveMessage ? getLang("edited", data.leaveMessage) : getLang("reseted"));
			}
			case "file": {
				if (args[1] === "reset") {
					if (!data.leaveAttachment) return message.reply(getLang("noFile"));
					try {
						await Promise.all(data.leaveAttachment.map(id => drive.deleteFile(id)));
						delete data.leaveAttachment;
						await threadsData.set(threadID, { data });
						return message.reply(getLang("resetedFile"));
					} catch (e) {}
				} else if (!event.attachments.length && (!event.messageReply || !event.messageReply.attachments.length)) {
					return message.reply(getLang("missingFile"), (err, info) => {
						global.GoatBot.onReply.set(info.messageID, { messageID: info.messageID, author: senderID, commandName });
					});
				} else {
					saveChanges(message, event, threadID, senderID, threadsData, getLang);
				}
				break;
			}
			case "on":
			case "off": {
				settings.sendLeaveMessage = args[0] === "on";
				await threadsData.set(threadID, { settings });
				return message.reply(getLang(args[0] === "on" ? "turnedOn" : "turnedOff"));
			}
			default:
				return message.SyntaxError();
		}
	},

	onReply: async function ({ event, Reply, message, threadsData, getLang }) {
		if (event.senderID !== Reply.author) return;
		if (!event.attachments.length && (!event.messageReply || !event.messageReply.attachments.length))
			return message.reply(getLang("missingFile"));
		saveChanges(message, event, event.threadID, event.senderID, threadsData, getLang);
	}
};

async function saveChanges(message, event, threadID, senderID, threadsData, getLang) {
	const { data } = await threadsData.get(threadID);
	const attachments = [...event.attachments, ...(event.messageReply?.attachments || [])].filter(a => ["photo", "animated_image", "video", "audio"].includes(a.type));
	if (!data.leaveAttachment) data.leaveAttachment = [];

	await Promise.all(attachments.map(async attachment => {
		const { url } = attachment;
		const ext = getExtFromUrl(url);
		const fileName = `leave_${getTime()}.${ext}`;
		const infoFile = await drive.uploadFile(`leave_${threadID}_${senderID}_${fileName}`, await getStreamFromURL(url));
		data.leaveAttachment.push(infoFile.id);
	}));

	await threadsData.set(threadID, { data });
	message.reply(getLang("addedFile", attachments.length));
}
