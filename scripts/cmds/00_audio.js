const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");

const audioList = {
  women: {
    message: "‚òï„Äå Women „Äç",
    file: "women.mp3",
    url: "https://files.catbox.moe/3ifzpn.mp3",
  },
  yamate: {
    message: "ü•µ„Äå Yamate „Äç",
    file: "yamate.mp3",
    url: "https://files.catbox.moe/07hmj9.mp3",
  },
  dazai: {
    message: "üòå„Äå ahhh~ „Äç",
    file: "Dazai.mp3",
    url: "https://files.catbox.moe/q83azf.mp3",
  },
  ara: {
    message: "üòâ„Äå ara ara „Äç",
    file: "ara.mp3",
    url: "https://files.catbox.moe/kl3pbc.mp3",
  },
  "good night": {
    message: "üåâ„Äå Good Night „Äç",
    file: "night.mp3",
    url: "https://files.catbox.moe/15vs8u.mp3",
  },
  sus: {
    message: "ü¶é„Äå sus „Äç",
    file: "sus.mp3",
    url: "https://files.catbox.moe/0xpi2z.mp3",
  },
  "good morning": {
    message: "üåÑ„Äå Good Morning „Äç",
    file: "gm.mp3",
    url: "https://files.catbox.moe/d79j8g.mp3",
  },
  yourmom: {
    message: "üòè„Äå Bujis ki nai? „Äç",
    file: "yourmom.mp3",
    url: "https://files.catbox.moe/hpc70p.mp3",
  },
  machikney: {
    message: "üî•„Äå Machikney „Äç",
    file: "machikney.mp3",
    url: "https://files.catbox.moe/c1grxy.mp3",
  },
  randi: {
    message: "üò°„Äå Randi ko Chora „Äç",
    file: "randi.mp3",
    url: "https://files.catbox.moe/czk9ij.mp3",
  },
  sachiin: {
    message: "üåà„Äå GAYY „Äç",
    file: "sachiin.mp3",
    url: "https://files.catbox.moe/4n7jzq.mp3",
  },
  omg: {
    message: "üò≥„Äå OMG WoW „Äç",
    file: "omg.mp3",
    url: "https://files.catbox.moe/0q5jru.mp3",
  },
};

const cacheDir = path.join(__dirname, "cache");

async function ensureCacheDir() {
  try {
    await fs.ensureDir(cacheDir);
  } catch (err) {
    console.error("‚ùå ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", err);
  }
}

module.exports = {
  config: {
    name: "audio_new",
    version: "2.1",
    author: "ùêÄùê¨ùê¢ùêü ùêåùêöùê°ùê¶ùêÆùêù",
    countDown: 3,
    role: 0,
    shortDescription: "üîä ‡¶∏‡ßç‡¶™‡ßá‡¶∏‡¶ø‡¶´‡¶ø‡¶ï ‡¶∂‡¶¨‡ßç‡¶¶‡ßá ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡ßã",
    longDescription:
      "‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßá‡¶â ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶§‡¶ñ‡¶® ‡¶∏‡ßá‡¶á ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶¨‡ßá‡•§",
    category: "no prefix",
  },

  onStart: async () => {
    await ensureCacheDir();
  },

  onChat: async function ({ event, message }) {
    try {
      if (!event.body) return;

      // ‡¶ü‡¶æ‡¶á‡¶™‡¶ø‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶®
      if (message.replyTyping) await message.replyTyping();

      const keyword = event.body.toLowerCase().trim();
      if (!audioList.hasOwnProperty(keyword)) return;

      const { message: text, file, url } = audioList[keyword];
      const filePath = path.join(cacheDir, file);

      // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßã
      if (!(await fs.pathExists(filePath))) {
        try {
          const response = await axios.get(url, { responseType: "arraybuffer" });
          await fs.writeFile(filePath, Buffer.from(response.data));
          console.log(`‚úÖ "${file}" ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
        } catch (err) {
          console.error(`‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (${file}):`, err);
          return message.reply(`‚ùå Sorry, "${keyword}" ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§ ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§`);
        }
      }

      // ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡ßã
      return message.reply({
        body: text,
        attachment: fs.createReadStream(filePath),
      });
    } catch (error) {
      console.error("‚ùå ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
      return message.reply("‚ùå ‡¶ï‡ßã‡¶® ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    }
  },
};
