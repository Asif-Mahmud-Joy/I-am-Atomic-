module.exports = {
  config: {
    name: "refresh",
    version: "2.1.0",
    author: "NTKhang & Modified by ‚ú®Asif‚ú®",
    countDown: 30, // Reduced cooldown
    role: 0,
    description: {
      vi: "L√†m m·ªõi th√¥ng tin nh√≥m/ng∆∞·ªùi d√πng",
      en: "Refresh group/user information",
      bn: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™/‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®"
    },
    category: "utility",
    guide: {
      vi: `
        {pn} group [ID] - L√†m m·ªõi nh√≥m (ID m·∫∑c ƒë·ªãnh: nh√≥m hi·ªán t·∫°i)
        {pn} user [ID/@tag] - L√†m m·ªõi ng∆∞·ªùi d√πng (m·∫∑c ƒë·ªãnh: b·∫°n)
      `,
      en: `
        {pn} group [ID] - Refresh group (default: current group)
        {pn} user [ID/@tag] - Refresh user (default: yourself)
      `,
      bn: `
        {pn} group [ID] - ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü: ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™)
        {pn} user [ID/@tag] - ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü: ‡¶Ü‡¶™‡¶®‡¶ø)
      `
    }
  },

  langs: {
    vi: {
      success: "‚úÖ | ƒê√£ l√†m m·ªõi th√†nh c√¥ng!",
      error: "‚ùå | Kh√¥ng th·ªÉ l√†m m·ªõi",
      invalidTarget: "‚ö†Ô∏è | ID kh√¥ng h·ª£p l·ªá",
      missingPermission: "üîí | B·∫°n c·∫ßn quy·ªÅn admin ƒë·ªÉ l√†m m·ªõi nh√≥m kh√°c"
    },
    en: {
      success: "‚úÖ | Successfully refreshed!",
      error: "‚ùå | Failed to refresh",
      invalidTarget: "‚ö†Ô∏è | Invalid ID",
      missingPermission: "üîí | You need admin rights to refresh other groups"
    },
    bn: {
      success: "‚úÖ | ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
      error: "‚ùå | ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•",
      invalidTarget: "‚ö†Ô∏è | ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶Ü‡¶á‡¶°‡¶ø",
      missingPermission: "üîí | ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®"
    }
  },

  onStart: async function ({ 
    args, 
    message, 
    event, 
    usersData, 
    threadsData, 
    getLang,
    api,
    role
  }) {
    try {
      const [type, target] = args;
      
      // Validate input
      if (!["group", "user"].includes(type)) {
        return message.SyntaxError();
      }

      if (type === "group") {
        await this.handleGroupRefresh({
          target,
          event,
          threadsData,
          message,
          getLang,
          api,
          role
        });
      } 
      else if (type === "user") {
        await this.handleUserRefresh({
          target,
          event,
          usersData,
          message,
          getLang
        });
      }
    } catch (error) {
      console.error("Refresh command error:", error);
      message.reply(getLang("error"));
    }
  },

  handleGroupRefresh: async function ({
    target,
    event,
    threadsData,
    message,
    getLang,
    api,
    role
  }) {
    const targetID = target || event.threadID;
    
    // Validate thread ID
    if (isNaN(targetID)) {
      return message.reply(getLang("invalidTarget"));
    }

    // Check permissions if refreshing other groups
    if (targetID !== event.threadID && role < 1) {
      return message.reply(getLang("missingPermission"));
    }

    try {
      await threadsData.refreshInfo(targetID);
      
      // Additional API call to ensure fresh data
      if (targetID === event.threadID) {
        await api.getThreadInfo(targetID);
      }
      
      message.reply(getLang("success"));
    } catch (error) {
      console.error("Group refresh error:", error);
      message.reply(getLang("error"));
    }
  },

  handleUserRefresh: async function ({
    target,
    event,
    usersData,
    message,
    getLang
  }) {
    let targetID = event.senderID;
    
    if (target) {
      // Handle mentions
      if (event.mentions && Object.keys(event.mentions).length > 0) {
        targetID = Object.keys(event.mentions)[0];
      } 
      // Handle direct ID input
      else if (!isNaN(target)) {
        targetID = target;
      } 
      else {
        return message.reply(getLang("invalidTarget"));
      }
    }

    try {
      await usersData.refreshInfo(targetID);
      message.reply(getLang("success"));
    } catch (error) {
      console.error("User refresh error:", error);
      message.reply(getLang("error"));
    }
  }
};
