const fs = require("fs");
const path = require("path");

// ЁЯФР Atomic Constants
const ATOMIC_DIR = path.join(__dirname, "assist_json");
const APPROVED_PATH = path.join(ATOMIC_DIR, "approved_ids.json");
const PENDING_PATH = path.join(ATOMIC_DIR, "pending_ids.json");
const LOG_PATH = path.join(ATOMIC_DIR, "nsfw_atomic.log");
const MAX_LOG_SIZE = 2 * 1024 * 1024; // 2MB

// тЪЫя╕П Atomic Logger
class AtomicLogger {
  static rotate() {
    try {
      if (fs.existsSync(LOG_PATH)) {
        const stats = fs.statSync(LOG_PATH);
        if (stats.size > MAX_LOG_SIZE) {
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          fs.renameSync(LOG_PATH, path.join(ATOMIC_DIR, `nsfw_log_${timestamp}.txt`));
        }
      }
    } catch (err) {
      console.error("тШвя╕П [ATOMIC LOG ROTATION ERROR]", err);
    }
  }

  static log(action, id, user, text = "") {
    try {
      this.rotate();
      const entry = `[${new Date().toISOString()}] тЪЫя╕П ${action} ┬╗ ЁЯСд ${user} ┬╗ ЁЯТм ${text} ┬╗ ЁЯЖФ ${id}\n`;
      fs.appendFileSync(LOG_PATH, entry);
    } catch (err) {
      console.error("тШвя╕П [ATOMIC LOGGER ERROR]", err);
    }
  }
}

// ЁЯФТ Atomic File Operations
class AtomicData {
  static init() {
    if (!fs.existsSync(ATOMIC_DIR)) fs.mkdirSync(ATOMIC_DIR);
    if (!fs.existsSync(APPROVED_PATH)) fs.writeFileSync(APPROVED_PATH, "[]");
    if (!fs.existsSync(PENDING_PATH)) fs.writeFileSync(PENDING_PATH, "[]");
    if (!fs.existsSync(LOG_PATH)) fs.writeFileSync(LOG_PATH, "");
  }

  static readJSON(file) {
    try {
      return JSON.parse(fs.readFileSync(file, "utf8") || "[]");
    } catch {
      return [];
    }
  }

  static writeJSON(file, data) {
    try {
      fs.writeFileSync(file, JSON.stringify(data, null, 2), "utf8");
    } catch (err) {
      AtomicLogger.log("FILE_ERROR", "", "", err.message);
    }
  }
}

// тЬи UI Components
const AtomicUI = {
  header: "тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ\nтХС   ЁЯФЮ ATOMIC NSFW MANAGEMENT   тХС\nтХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ",
  divider: "тЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦм",
  
  commandGuide: [
    "тЪЩя╕П  Command Usage:",
    "  ЁЯФ╣ nsfw_manage approved <ID> [ржорзЗрж╕рзЗржЬ]  ┬╗ ржерзНрж░рзЗржб ржЕржирзБржорзЛржжржи",
    "  ЁЯФ╣ nsfw_manage remove <ID> [ржХрж╛рж░ржг]    ┬╗ ржЕржирзБржорждрж┐ ржкрзНрж░рждрзНржпрж╛рж╣рж╛рж░",
    "  ЁЯФ╣ nsfw_manage disapproved <ID> [ржХрж╛рж░ржг] ┬╗ ржЕржирзБрж░рзЛржз ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи",
    "  ЁЯФ╣ nsfw_manage check                ┬╗ ржмрж░рзНрждржорж╛ржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕"
  ].join("\n"),
  
  formatReply(title, content, emoji = "тЪЫя╕П") {
    return `${this.header}\n${this.divider}\n\n${emoji} ${title}\n${content}\n\n${this.divider}`;
  }
};

module.exports = {
  config: {
    name: "nsfw_manage",
    version: "2.0",
    author: "ЁЭРАЁЭРмЁЭРвЁЭРЯ ЁЭРМЁЭРЪЁЭРбЁЭРжЁЭРоЁЭРЭ",
    countDown: 3,
    category: "ЁЯФЮ NSFW",
    role: 2,
    shortDescription: {
      en: "тШвя╕П Atomic NSFW Access Control"
    },
    guide: {
      en: `
        ${AtomicUI.header}
        ${AtomicUI.commandGuide}
        ${AtomicUI.divider}
      `
    }
  },

  onStart: async function ({ api, args, message, event, Users }) {
    // тП│ Typing Animation
    api.sendTyping(event.threadID);

    // ЁЯФР Authorization Check
    let senderRole = 0;
    try {
      senderRole = await Users.getRoleFromID(event.senderID);
    } catch {
      senderRole = 0;
    }
    
    if (senderRole < this.config.role) {
      return message.reply(
        AtomicUI.formatReply(
          "тЫФ ACCESS DENIED", 
          "ржЖржкржирж╛рж░ ржПржЗ ржХржорж╛ржирзНржб ржЪрж╛рж▓рж╛ржирзЛрж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!",
          "ЁЯФТ"
        )
      );
    }

    // Initialize Atomic System
    AtomicData.init();
    const approvedIDs = AtomicData.readJSON(APPROVED_PATH);
    const pendingIDs = AtomicData.readJSON(PENDING_PATH);

    // ЁЯЫбя╕П Input Validation
    function validateThreadID(id) {
      return /^\d{16,}$/.test(id);
    }

    const cmd = args[0]?.toLowerCase();
    const idArg = args[1];
    const textArg = args.slice(2).join(" ") || "ржХрзЛржирзЛ ржмрж╛рж░рзНрждрж╛ ржирзЗржЗ";

    if (!cmd) {
      return message.reply(
        AtomicUI.formatReply(
          "тЪая╕П INVALID COMMAND", 
          this.guide.en,
          "тЭУ"
        )
      );
    }

    // тЪб Command Processing
    try {
      switch (cmd) {
        case "approved": {
          if (!idArg) {
            return message.reply(
              AtomicUI.formatReply(
                "тЭЧ MISSING ID", 
                "ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржерзНрж░рзЗржб ржЖржЗржбрж┐ ржжрж┐ржи:\n\nUsage: nsfw_manage approved <ID> [ржорзЗрж╕рзЗржЬ]",
                "тЪая╕П"
              )
            );
          }

          if (!validateThreadID(idArg)) {
            return message.reply(
              AtomicUI.formatReply(
                "тЪая╕П INVALID ID FORMAT", 
                "ржерзНрж░рзЗржб ржЖржЗржбрж┐ рззрзм+ рж╕ржВржЦрзНржпрж╛рж░ рж╣рждрзЗ рж╣ржмрзЗ!",
                "тЭМ"
              )
            );
          }

          if (approvedIDs.includes(idArg)) {
            return message.reply(
              AtomicUI.formatReply(
                "тД╣я╕П ALREADY APPROVED", 
                `ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${idArg} ржЗрждрж┐ржоржзрзНржпрзЗ ржЕржирзБржорзЛржжрж┐ржд!`,
                "тЬЕ"
              )
            );
          }

          // Atomic Operation
          approvedIDs.push(idArg);
          AtomicData.writeJSON(APPROVED_PATH, approvedIDs);

          // Remove from pending
          if (pendingIDs.includes(idArg)) {
            const newPending = pendingIDs.filter(e => e !== idArg);
            AtomicData.writeJSON(PENDING_PATH, newPending);
          }

          // Notify thread
          api.sendMessage(
            `ЁЯОЙ ржЖржкржирж╛рж░ ржерзНрж░рзЗржб NSFW ржПрж░ ржЬржирзНржп ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!\n\n` +
            `ЁЯФЮ ржПржЦржи ржерзЗржХрзЗ рж╕ржорж╕рзНржд NSFW ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред\n\n` +
            `ЁЯУй ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржмрж╛рж░рзНрждрж╛: ${textArg}\n\n` +
            `${AtomicUI.divider}`,
            idArg
          );

          // Log action
          AtomicLogger.log("APPROVED", idArg, event.senderID, textArg);

          return message.reply(
            AtomicUI.formatReply(
              "тЬЕ APPROVAL SUCCESS", 
              `ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${idArg} рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!`,
              "тЬи"
            )
          );
        }

        case "remove": {
          if (!idArg) {
            return message.reply(
              AtomicUI.formatReply(
                "тЭЧ MISSING ID", 
                "ржЕржкрж╕рж╛рж░ржгрзЗрж░ ржЬржирзНржп ржерзНрж░рзЗржб ржЖржЗржбрж┐ ржжрж┐ржи:\n\nUsage: nsfw_manage remove <ID> [ржХрж╛рж░ржг]",
                "тЪая╕П"
              )
            );
          }

          if (!validateThreadID(idArg)) {
            return message.reply(
              AtomicUI.formatReply(
                "тЪая╕П INVALID ID FORMAT", 
                "ржерзНрж░рзЗржб ржЖржЗржбрж┐ рззрзм+ рж╕ржВржЦрзНржпрж╛рж░ рж╣рждрзЗ рж╣ржмрзЗ!",
                "тЭМ"
              )
            );
          }

          if (!approvedIDs.includes(idArg)) {
            return message.reply(
              AtomicUI.formatReply(
                "тЭМ NOT APPROVED", 
                `ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${idArg} ржЕржирзБржорзЛржжрж┐ржд ржиржпрж╝!`,
                "ЁЯФН"
              )
            );
          }

          // Atomic Operation
          const newApproved = approvedIDs.filter(e => e !== idArg);
          AtomicData.writeJSON(APPROVED_PATH, newApproved);

          // Notify thread
          api.sendMessage(
            `тЪая╕П ржЖржкржирж╛рж░ NSFW ржЕржирзБржорждрж┐ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n` +
            `ЁЯФТ ржХрж╛рж░ржг: ${textArg}\n\n` +
            `ржЖржкржирж╛рж░ ржЖржмрж╛рж░ ржЕржирзБржорждрж┐ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣рж▓рзЗ ржирждрзБржи ржХрж░рзЗ ржЕржирзБрж░рзЛржз ржХрж░рзБржиред\n\n` +
            `${AtomicUI.divider}`,
            idArg
          );

          // Log action
          AtomicLogger.log("REMOVED", idArg, event.senderID, textArg);

          return message.reply(
            AtomicUI.formatReply(
              "ЁЯЧСя╕П ACCESS REMOVED", 
              `ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${idArg} ржерзЗржХрзЗ NSFW ржЕржирзБржорждрж┐ рж╕рж░рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!`,
              "тЬЕ"
            )
          );
        }

        case "disapproved": {
          if (!idArg) {
            return message.reply(
              AtomicUI.formatReply(
                "тЭЧ MISSING ID", 
                "ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржирзЗрж░ ржЬржирзНржп ржерзНрж░рзЗржб ржЖржЗржбрж┐ ржжрж┐ржи:\n\nUsage: nsfw_manage disapproved <ID> [ржХрж╛рж░ржг]",
                "тЪая╕П"
              )
            );
          }

          if (!validateThreadID(idArg)) {
            return message.reply(
              AtomicUI.formatReply(
                "тЪая╕П INVALID ID FORMAT", 
                "ржерзНрж░рзЗржб ржЖржЗржбрж┐ рззрзм+ рж╕ржВржЦрзНржпрж╛рж░ рж╣рждрзЗ рж╣ржмрзЗ!",
                "тЭМ"
              )
            );
          }

          if (!pendingIDs.includes(idArg)) {
            return message.reply(
              AtomicUI.formatReply(
                "тД╣я╕П NOT PENDING", 
                `ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${idArg} ржкрзЗржирзНржбрж┐ржВ рждрж╛рж▓рж┐ржХрж╛ржпрж╝ ржирзЗржЗ!`,
                "ЁЯФН"
              )
            );
          }

          // Atomic Operation
          const newPending = pendingIDs.filter(e => e !== idArg);
          AtomicData.writeJSON(PENDING_PATH, newPending);

          // Notify thread
          api.sendMessage(
            `тЭМ ржЖржкржирж╛рж░ NSFW ржЕржирзБрж░рзЛржз ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n` +
            `ЁЯУЭ ржХрж╛рж░ржг: ${textArg}\n\n` +
            `ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ ржкрзБржирж░рж╛ржпрж╝ ржЖржмрзЗржжржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред\n\n` +
            `${AtomicUI.divider}`,
            idArg
          );

          // Log action
          AtomicLogger.log("DISAPPROVED", idArg, event.senderID, textArg);

          return message.reply(
            AtomicUI.formatReply(
              "тЫФ REQUEST REJECTED", 
              `ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${idArg} ржПрж░ ржЕржирзБрж░рзЛржз ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!`,
              "тЬЕ"
            )
          );
        }

        case "check": {
          const status = approvedIDs.includes(event.threadID) ?
            "тЬЕ ржПржЗ ржерзНрж░рзЗржбрзЗ NSFW ржЕржирзБржорзЛржжрж┐ржд ржЖржЫрзЗ!" :
            "тЭМ ржПржЗ ржерзНрж░рзЗржбрзЗ NSFW ржЕржирзБржорзЛржжрж┐ржд ржирзЗржЗ!";
          
          return message.reply(
            AtomicUI.formatReply(
              "ЁЯУК CURRENT STATUS", 
              status,
              approvedIDs.includes(event.threadID) ? "ЁЯФЮ" : "ЁЯФТ"
            )
          );
        }

        default: {
          return message.reply(
            AtomicUI.formatReply(
              "тЪая╕П INVALID COMMAND", 
              this.guide.en,
              "тЭУ"
            )
          );
        }
      }
    } catch (err) {
      AtomicLogger.log("COMMAND_ERROR", event.threadID, event.senderID, err.message);
      return message.reply(
        AtomicUI.formatReply(
          "тШвя╕П SYSTEM ERROR", 
          "ржХржорж╛ржирзНржб рж╕ржорзНржкрж╛ржжржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
          "ЁЯЫС"
        )
      );
    }
  }
};
