const fs = require("fs");
const path = require("path");

module.exports = {
  config: {
    name: "nsfw_manage",
    version: "1.0",
    author: "ЁЭРАЁЭРмЁЭРвЁЭРЯ ЁЭРМЁЭРЪЁЭРбЁЭРжЁЭРоЁЭРЭ",
    countDown: 5,
    category: "NSFW",
    role: 2,
    shortDescription: "Manage NSFW access per thread",
    guide: {
      en: `
        {pn} approved [threadID] [optionalMessage] тЬФ Approve a thread
        {pn} remove [threadID] [reason] тЭМ Remove approval
        {pn} disapproved [threadID] [reason] тЪа Disapprove request
        {pn} check ЁЯУК Check current thread status
      `
    }
  },

  onStart: async function ({ api, args, message, event, Users }) {
    // ржЯрж╛ржЗржкрж┐ржВ ржЕрзНржпрж╛ржирж┐ржорзЗрж╢ржи
    api.sendTyping(event.threadID);

    // Role ржЪрзЗржХ
    let senderRole = 0;
    try {
      senderRole = await Users.getRoleFromID(event.senderID);
    } catch {
      // ржпржжрж┐ ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, ржбрж┐ржлрж▓рзНржЯ 0 ржзрж░рж╛ рж╣ржмрзЗ
      senderRole = 0;
    }
    if (senderRole < this.config.role) {
      return message.reply("тЭМ ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗ ржПржЗ ржХржорж╛ржирзНржб ржЪрж╛рж▓рж╛ржирзЛрж░ ржЬржирзНржпред");
    }

    const assistDir = path.join(__dirname, "assist_json");
    if (!fs.existsSync(assistDir)) fs.mkdirSync(assistDir);

    const approvedPath = path.join(assistDir, "approved_ids.json");
    const pendingPath = path.join(assistDir, "pending_ids.json");
    const logPath = path.join(assistDir, "nsfw_log.txt");

    // ржлрж╛ржЗрж▓ ржирж╛ ржерж╛ржХрж▓рзЗ ржЦрж╛рж▓рж┐ ржЖрж░рзЗ ржжрж┐рзЯрзЗ рждрзИрж░рж┐ ржХрж░рзЛ
    if (!fs.existsSync(approvedPath)) fs.writeFileSync(approvedPath, "[]");
    if (!fs.existsSync(pendingPath)) fs.writeFileSync(pendingPath, "[]");
    if (!fs.existsSync(logPath)) fs.writeFileSync(logPath, "");

    // рж╕рж┐ржорзНржкрж▓ safe рж░рж┐ржб
    function readJSON(file) {
      try {
        const data = fs.readFileSync(file, "utf8");
        return JSON.parse(data || "[]");
      } catch {
        return [];
      }
    }

    // рж╕рж┐ржорзНржкрж▓ safe рж░рж╛ржЗржЯ
    function writeJSON(file, data) {
      try {
        fs.writeFileSync(file, JSON.stringify(data, null, 2), "utf8");
      } catch (err) {
        // ржПржЦрж╛ржирзЗ ржПрж░рж░ рж▓ржЧ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
      }
    }

    // рж▓ржЧ рж░рзЛржЯрзЗрж╢ржи рж╕рж╣ рж▓ржЧ рж▓рзЗржЦрж╛
    function appendLog(text) {
      try {
        let stats = null;
        try {
          stats = fs.statSync(logPath);
        } catch {}
        if (stats && stats.size > 1024 * 1024) {
          // 1MB рж╣рж▓рзЗ рж░рзЛржЯрзЗржЯ ржХрж░рзЛ
          const oldLog = path.join(assistDir, `nsfw_log_${Date.now()}.txt`);
          fs.renameSync(logPath, oldLog);
          fs.writeFileSync(logPath, "");
        }
        fs.appendFileSync(logPath, `${new Date().toISOString()} - ${text}\n`);
      } catch {}
    }

    // ржЗржиржкрзБржЯ ржпрж╛ржЪрж╛ржЗ: 16+ ржбрж┐ржЬрж┐ржЯ рж╕ржВржЦрзНржпрж╛
    function validateThreadID(id) {
      return /^\d{16,}$/.test(id);
    }

    let approvedIDs = readJSON(approvedPath);
    let pendingIDs = readJSON(pendingPath);

    function sendReply(text) {
      message.reply(text);
    }

    if (!args[0]) return sendReply("тЭУ ржнрзБрж▓ ржХржорж╛ржирзНржб! рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп: $help nsfw_manage");

    const cmd = args[0].toLowerCase();

    try {
      if (cmd === "approved" && args[1]) {
        const id = args[1];
        const adminMsg = args.slice(2).join(" ") || "ржХрзЛржирзЛ ржмрж╛рж░рзНрждрж╛ ржирзЗржЗ";

        if (!validateThreadID(id)) return sendReply("тЪая╕П ржерзНрж░рзЗржб ржЖржЗржбрж┐ ржлрж░ржорзНржпрж╛ржЯ ржнрзБрж▓!");

        if (approvedIDs.includes(id)) return sendReply(`тЬЕ ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${id} ржЗрждрж┐ржоржзрзНржпрзЗ ржЕржирзБржорзЛржжрж┐рждред`);

        approvedIDs.push(id);
        writeJSON(approvedPath, approvedIDs);

        // ржкрзЗржирзНржбрж┐ржВ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рзЛ
        if (pendingIDs.includes(id)) {
          pendingIDs = pendingIDs.filter(e => e !== id);
          writeJSON(pendingPath, pendingIDs);
        }

        api.sendMessage(
          `ЁЯУМ NSFW ржЕржирзБржорзЛржжржи рж╣рзЯрзЗржЫрзЗ!\nржПржЦржи ржерзЗржХрзЗ ржПржЗ ржерзНрж░рзЗржбрзЗ NSFW ржХржорж╛ржирзНржб ржЪрж╛рж▓рж╛рждрзЗ ржкрж╛рж░ржмрзЗржиред\n\nржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржмрж╛рж░рзНрждрж╛: ${adminMsg}`,
          id
        );

        appendLog(`APPROVED: ThreadID=${id} by User=${event.senderID} Msg=${adminMsg}`);

        return sendReply(`тЬЕ ржерзНрж░рзЗржб ржЖржЗржбрж┐: ${id} рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕржирзБржорзЛржжрж┐ржд рж╣рзЯрзЗржЫрзЗред`);
      }
      else if (cmd === "remove" && args[1]) {
        const id = args[1];
        const reason = args.slice(2).join(" ") || "ржХрж╛рж░ржг ржжрзЗрзЯрж╛ рж╣рзЯржирж┐";

        if (!validateThreadID(id)) return sendReply("тЪая╕П ржерзНрж░рзЗржб ржЖржЗржбрж┐ ржлрж░ржорзНржпрж╛ржЯ ржнрзБрж▓!");

        if (!approvedIDs.includes(id)) return sendReply(`тЭМ ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${id} ржЕржирзБржорзЛржжрж┐ржд ржирзЯред`);

        approvedIDs = approvedIDs.filter(e => e !== id);
        writeJSON(approvedPath, approvedIDs);

        api.sendMessage(
          `тЭМ ржЖржкржирж╛рж░ NSFW ржЕржирзБржорждрж┐ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред\nржХрж╛рж░ржг: ${reason}`,
          id
        );

        appendLog(`REMOVED: ThreadID=${id} by User=${event.senderID} Reason=${reason}`);

        return sendReply(`тЬЕ ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${id} ржерзЗржХрзЗ NSFW ржЕржирзБржорждрж┐ рж╕рж░рж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред`);
      }
      else if (cmd === "disapproved" && args[1]) {
        const id = args[1];
        const reason = args.slice(2).join(" ") || "ржХрж╛рж░ржг ржжрзЗрзЯрж╛ рж╣рзЯржирж┐";

        if (!validateThreadID(id)) return sendReply("тЪая╕П ржерзНрж░рзЗржб ржЖржЗржбрж┐ ржлрж░ржорзНржпрж╛ржЯ ржнрзБрж▓!");

        if (!pendingIDs.includes(id)) return sendReply(`тЪая╕П ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${id} ржкрзЗржирзНржбрж┐ржВ рждрж╛рж▓рж┐ржХрж╛рзЯ ржирзЗржЗред`);

        pendingIDs = pendingIDs.filter(e => e !== id);
        writeJSON(pendingPath, pendingIDs);

        api.sendMessage(
          `тЪая╕П ржЖржкржирж╛рж░ NSFW ржЕржирзБрж░рзЛржз ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржд рж╣рзЯрзЗржЫрзЗред\nржХрж╛рж░ржг: ${reason}`,
          id
        );

        appendLog(`DISAPPROVED: ThreadID=${id} by User=${event.senderID} Reason=${reason}`);

        return sendReply(`тЬЕ ржерзНрж░рзЗржб ржЖржЗржбрж┐ ${id} ржПрж░ NSFW ржЕржирзБрж░рзЛржз ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржд рж╣рзЯрзЗржЫрзЗред`);
      }
      else if (cmd === "check") {
        if (approvedIDs.includes(event.threadID)) {
          return sendReply("тЬЕ ржПржЗ ржерзНрж░рзЗржбрзЗ NSFW ржЕржирзБржорзЛржжрж┐ржд ржЖржЫрзЗред");
        } else {
          return sendReply("тЭМ ржПржЗ ржерзНрж░рзЗржбрзЗ NSFW ржЕржирзБржорзЛржжрж┐ржд ржирзЗржЗред");
        }
      }
      else {
        return sendReply("тЭУ ржнрзБрж▓ ржХржорж╛ржирзНржб! рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп: $help nsfw_manage");
      }
    } catch (err) {
      appendLog(`ERROR: User=${event.senderID} Cmd=${cmd} Error=${err.message}`);
      return sendReply("тЭМ ржХржорж╛ржирзНржб рж╕ржорзНржкрж╛ржжржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ, ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред");
    }
  }
};
