const { getPrefix } = global.utils;

module.exports = {
  config: {
    name: "rules",
    version: "3.0.0",
    author: "NTKhang & Upgraded by ‚ú®Asif‚ú®",
    countDown: 3,
    role: 0,
    description: {
      en: "Comprehensive group rules management system",
      vi: "H·ªá th·ªëng qu·∫£n l√Ω n·ªôi quy nh√≥m to√†n di·ªán",
      bn: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ"
    },
    category: "administration",
    guide: {
      en: "{pn} [action] [args] - Manage group rules",
      vi: "{pn} [h√†nh ƒë·ªông] [ƒë·ªëi s·ªë] - Qu·∫£n l√Ω n·ªôi quy nh√≥m",
      bn: "{pn} [‡¶ï‡¶∞‡ßç‡¶Æ] [‡¶Ü‡¶∞‡ßç‡¶ó‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü] - ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ"
    }
  },

  langs: {
    en: {
      rulesList: "üìú GROUP RULES üìú\n\n%1\n\nTotal: %2 rules",
      noRules: "‚ÑπÔ∏è This group has no rules yet.\nUse `%1rules add [rule]` to add one.",
      ruleAdded: "‚úÖ Rule added successfully!",
      ruleEdited: "‚úèÔ∏è Rule #%1 updated:\nBefore: %2\nAfter: %3",
      ruleDeleted: "üóëÔ∏è Rule #%1 deleted:\n%2",
      allRulesCleared: "üßπ All rules have been cleared!",
      confirmClear: "‚ö†Ô∏è Are you sure you want to clear ALL rules?\nReact with any emoji to confirm.",
      invalidNumber: "‚ùå Invalid rule number. Please use a number between 1 and %1",
      missingContent: "‚ùå Please provide rule content",
      adminOnly: "‚õî Only admins can perform this action",
      moveSuccess: "üîÑ Rules #%1 and #%2 swapped successfully",
      viewSingleRule: "üîç Rule #%1:\n%2",
      help: `üìù RULES COMMAND HELP:
‚Ä¢ {pn} - View all rules
‚Ä¢ {pn} add [rule] - Add new rule
‚Ä¢ {pn} edit [num] [new rule] - Edit existing rule
‚Ä¢ {pn} delete [num] - Delete specific rule
‚Ä¢ {pn} move [num1] [num2] - Swap rule positions
‚Ä¢ {pn} clear - Remove all rules
‚Ä¢ {pn} view [num] - View specific rule`
    },
    vi: {
      rulesList: "üìú N·ªòI QUY NH√ìM üìú\n\n%1\n\nT·ªïng: %2 quy ƒë·ªãnh",
      noRules: "‚ÑπÔ∏è Nh√≥m ch∆∞a c√≥ n·ªôi quy n√†o.\nD√πng `%1rules add [n·ªôi quy]` ƒë·ªÉ th√™m.",
      ruleAdded: "‚úÖ ƒê√£ th√™m n·ªôi quy th√†nh c√¥ng!",
      ruleEdited: "‚úèÔ∏è ƒê√£ s·ª≠a n·ªôi quy #%1:\nTr∆∞·ªõc: %2\nSau: %3",
      ruleDeleted: "üóëÔ∏è ƒê√£ x√≥a n·ªôi quy #%1:\n%2",
      allRulesCleared: "üßπ ƒê√£ x√≥a to√†n b·ªô n·ªôi quy!",
      confirmClear: "‚ö†Ô∏è B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a T·∫§T C·∫¢ n·ªôi quy?\nTh·∫£ c·∫£m x√∫c ƒë·ªÉ x√°c nh·∫≠n.",
      invalidNumber: "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 1 ƒë·∫øn %1",
      missingContent: "‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung n·ªôi quy",
      adminOnly: "‚õî Ch·ªâ qu·∫£n tr·ªã vi√™n ƒë∆∞·ª£c th·ª±c hi·ªán h√†nh ƒë·ªông n√†y",
      moveSuccess: "üîÑ ƒê√£ ƒë·ªïi v·ªã tr√≠ n·ªôi quy #%1 v√† #%2",
      viewSingleRule: "üîç N·ªôi quy #%1:\n%2",
      help: `üìù TR·ª¢ GI√öP L·ªÜNH RULES:
‚Ä¢ {pn} - Xem t·∫•t c·∫£ n·ªôi quy
‚Ä¢ {pn} add [n·ªôi quy] - Th√™m n·ªôi quy m·ªõi
‚Ä¢ {pn} edit [s·ªë] [n·ªôi quy m·ªõi] - S·ª≠a n·ªôi quy
‚Ä¢ {pn} delete [s·ªë] - X√≥a n·ªôi quy
‚Ä¢ {pn} move [s·ªë1] [s·ªë2] - ƒê·ªïi v·ªã tr√≠ n·ªôi quy
‚Ä¢ {pn} clear - X√≥a t·∫•t c·∫£ n·ªôi quy
‚Ä¢ {pn} view [s·ªë] - Xem n·ªôi quy c·ª• th·ªÉ`
    },
    bn: {
      rulesList: "üìú ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ üìú\n\n%1\n\n‡¶Æ‡ßã‡¶ü: %2 ‡¶ü‡¶ø ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ",
      noRules: "‚ÑπÔ∏è ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶®‡ßá‡¶á‡•§\n‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá `%1rules add [‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ]` ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      ruleAdded: "‚úÖ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
      ruleEdited: "‚úèÔ∏è ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ #%1 ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá: %2\n‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá: %3",
      ruleDeleted: "üóëÔ∏è ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ #%1 ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n%2",
      allRulesCleared: "üßπ ‡¶∏‡¶¨ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
      confirmClear: "‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶∏‡¶¨ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?\n‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶Æ‡ßã‡¶ú‡¶ø ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∞‡¶ø‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      invalidNumber: "‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡•§ 1 ‡¶•‡ßá‡¶ï‡ßá %1 ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®",
      missingContent: "‚ùå ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
      adminOnly: "‚õî ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®",
      moveSuccess: "üîÑ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ #%1 ‡¶è‡¶¨‡¶Ç #%2 ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡¶¶‡¶≤‡¶¨‡¶¶‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      viewSingleRule: "üîç ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ #%1:\n%2",
      help: `üìù RULES ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ:
‚Ä¢ {pn} - ‡¶∏‡¶¨ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
‚Ä¢ {pn} add [‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ] - ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} edit [‡¶®‡¶Æ‡ßç‡¶¨‡¶∞] [‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ] - ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} delete [‡¶®‡¶Æ‡ßç‡¶¨‡¶∞] - ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®
‚Ä¢ {pn} move [‡¶®‡¶Æ‡ßç‡¶¨‡¶∞1] [‡¶®‡¶Æ‡ßç‡¶¨‡¶∞2] - ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} clear - ‡¶∏‡¶¨ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®
‚Ä¢ {pn} view [‡¶®‡¶Æ‡ßç‡¶¨‡¶∞] - ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®`
    }
  },

  onStart: async function ({ 
    message, 
    event, 
    args, 
    threadsData, 
    getLang,
    role,
    prefix
  }) {
    const threadID = event.threadID;
    const rules = await threadsData.get(threadID, "data.rules", []);
    const action = args[0]?.toLowerCase();
    const lang = getLang;

    // Show help if no action or invalid action
    if (!action || action === "help") {
      return message.reply(lang("help").replace(/{pn}/g, prefix + this.config.name));
    }

    // View all rules
    if (["list", "all", "view"].includes(action) && !args[1]) {
      if (rules.length === 0) {
        return message.reply(lang("noRules", prefix));
      }
      const formattedRules = rules.map((rule, i) => `${i+1}. ${rule}`).join("\n");
      return message.reply(lang("rulesList", formattedRules, rules.length));
    }

    // View single rule
    if (action === "view" && args[1]) {
      const ruleNum = parseInt(args[1]);
      if (isNaN(ruleNum) return message.reply(lang("invalidNumber", rules.length));
      if (ruleNum < 1 || ruleNum > rules.length) {
        return message.reply(lang("invalidNumber", rules.length));
      }
      return message.reply(lang("viewSingleRule", ruleNum, rules[ruleNum-1]));
    }

    // Add new rule
    if (["add", "+", "new"].includes(action)) {
      if (role < 1) return message.reply(lang("adminOnly"));
      const content = args.slice(1).join(" ");
      if (!content) return message.reply(lang("missingContent"));
      rules.push(content);
      await threadsData.set(threadID, rules, "data.rules");
      return message.reply(lang("ruleAdded"));
    }

    // Edit existing rule
    if (["edit", "update", "modify"].includes(action)) {
      if (role < 1) return message.reply(lang("adminOnly"));
      const ruleNum = parseInt(args[1]);
      if (isNaN(ruleNum)) return message.reply(lang("invalidNumber", rules.length));
      if (ruleNum < 1 || ruleNum > rules.length) {
        return message.reply(lang("invalidNumber", rules.length));
      }
      const newContent = args.slice(2).join(" ");
      if (!newContent) return message.reply(lang("missingContent"));
      const oldContent = rules[ruleNum-1];
      rules[ruleNum-1] = newContent;
      await threadsData.set(threadID, rules, "data.rules");
      return message.reply(lang("ruleEdited", ruleNum, oldContent, newContent));
    }

    // Delete rule
    if (["delete", "del", "remove", "-"].includes(action)) {
      if (role < 1) return message.reply(lang("adminOnly"));
      const ruleNum = parseInt(args[1]);
      if (isNaN(ruleNum)) return message.reply(lang("invalidNumber", rules.length));
      if (ruleNum < 1 || ruleNum > rules.length) {
        return message.reply(lang("invalidNumber", rules.length));
      }
      const deletedRule = rules.splice(ruleNum-1, 1)[0];
      await threadsData.set(threadID, rules, "data.rules");
      return message.reply(lang("ruleDeleted", ruleNum, deletedRule));
    }

    // Move/swap rules
    if (["move", "swap", "exchange"].includes(action)) {
      if (role < 1) return message.reply(lang("adminOnly"));
      const num1 = parseInt(args[1]);
      const num2 = parseInt(args[2]);
      if (isNaN(num1) || isNaN(num2)) {
        return message.reply(lang("invalidNumber", rules.length));
      }
      if (num1 < 1 || num1 > rules.length || num2 < 1 || num2 > rules.length) {
        return message.reply(lang("invalidNumber", rules.length));
      }
      if (num1 === num2) {
        return message.reply("‚ö†Ô∏è Cannot swap the same rule positions");
      }
      [rules[num1-1], rules[num2-1]] = [rules[num2-1], rules[num1-1]];
      await threadsData.set(threadID, rules, "data.rules");
      return message.reply(lang("moveSuccess", num1, num2));
    }

    // Clear all rules
    if (["clear", "reset", "clean"].includes(action)) {
      if (role < 1) return message.reply(lang("adminOnly"));
      return message.reply(lang("confirmClear"), (err, info) => {
        global.GoatBot.onReaction.set(info.messageID, {
          commandName: this.config.name,
          author: event.senderID,
          threadID
        });
      });
    }

    // Invalid command
    return message.reply(lang("help").replace(/{pn}/g, prefix + this.config.name));
  },

  onReaction: async function ({ threadsData, message, Reaction, event, getLang }) {
    if (event.userID !== Reaction.author) return;
    await threadsData.set(Reaction.threadID, [], "data.rules");
    message.reply(getLang("allRulesCleared"));
  }
};
