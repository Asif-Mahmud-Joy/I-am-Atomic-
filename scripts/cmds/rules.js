// ‚úÖ UPGRADED: Group Rules Command with Banenglish + Real-World Improvements
const { getPrefix } = global.utils;

module.exports = {
  config: {
    name: "rules",
    version: "2.0",
    author: "‚ú® Mr.Smokey [Asif Mahmud] ‚ú®",
    countDown: 5,
    role: 0,
    shortDescription: {
      vi: "Quy t·∫Øc nh√≥m",
      en: "Group rules",
      bn: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ"
    },
    longDescription: {
      vi: "Xem/th√™m/s·ª≠a/x√≥a n·ªôi quy nh√≥m",
      en: "View/add/edit/delete group rules",
      bn: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"
    },
    category: "box chat",
    guide: {
      en: "{pn} [add/edit/delete/view/remove]",
      bn: "{pn} [add/edit/delete/view/remove]"
    }
  },

  langs: {
    en: {
      yourRules: "üìú Group Rules:\n%1",
      noRules: "‚ö†Ô∏è No rules found! Use `%1rules add <your rule>` to add rules.",
      successAdd: "‚úÖ Rule added!",
      successEdit: "‚úèÔ∏è Rule %1 updated to: %2",
      successDelete: "üóëÔ∏è Deleted rule %1: %2",
      successRemove: "üßπ All rules cleared!",
      confirmRemove: "‚ö†Ô∏è React with any emoji to confirm rule deletion.",
      invalidNum: "‚ùå Invalid rule number.",
      permission: "‚õî Only admins can use this command.",
      rulesNotFound: "‚ùå Rule number %1 does not exist.",
      listNumbered: "%1. %2"
    },
    bn: {
      yourRules: "üìú ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ:\n%1",
      noRules: "‚ö†Ô∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶®‡ßá‡¶á! ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá `%1rules add <‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ>` ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
      successAdd: "‚úÖ ‡¶®‡¶ø‡ßü‡¶Æ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá!",
      successEdit: "‚úèÔ∏è ‡¶®‡¶ø‡ßü‡¶Æ %1 ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: %2",
      successDelete: "üóëÔ∏è ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá %1: %2",
      successRemove: "üßπ ‡¶∏‡¶¨ ‡¶®‡¶ø‡ßü‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
      confirmRemove: "‚ö†Ô∏è ‡¶∏‡¶¨ ‡¶®‡¶ø‡ßü‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶Æ‡ßã‡¶ú‡¶ø ‡¶∞‡¶ø‡¶Ø‡¶º‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      invalidNum: "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡•§",
      permission: "‚õî ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§",
      rulesNotFound: "‚ùå ‡¶®‡¶ø‡ßü‡¶Æ %1 ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§",
      listNumbered: "%1. %2"
    }
  },

  onStart: async function ({ role, args, message, event, threadsData, getLang }) {
    const lang = getLang();
    const { threadID } = event;
    const type = (args[0] || '').toLowerCase();
    const rules = await threadsData.get(threadID, "data.rules", []);

    // View rules
    if (!type || type === "view") {
      if (rules.length === 0)
        return message.reply(lang("noRules", getPrefix(threadID)));
      const text = rules.map((r, i) => lang("listNumbered", i + 1, r)).join("\n");
      return message.reply(lang("yourRules", text));
    }

    // Add rule
    if (["add", "+"].includes(type)) {
      if (role < 1) return message.reply(lang("permission"));
      const content = args.slice(1).join(" ");
      if (!content) return message.reply(lang("noRules", getPrefix(threadID)));
      rules.push(content);
      await threadsData.set(threadID, rules, "data.rules");
      return message.reply(lang("successAdd"));
    }

    // Edit rule
    if (["edit", "-e"].includes(type)) {
      if (role < 1) return message.reply(lang("permission"));
      const index = parseInt(args[1]);
      if (isNaN(index) || index < 1 || index > rules.length)
        return message.reply(lang("rulesNotFound", args[1]));
      const content = args.slice(2).join(" ");
      if (!content) return message.reply(lang("noRules"));
      rules[index - 1] = content;
      await threadsData.set(threadID, rules, "data.rules");
      return message.reply(lang("successEdit", index, content));
    }

    // Delete rule
    if (["delete", "del", "-d"].includes(type)) {
      if (role < 1) return message.reply(lang("permission"));
      const index = parseInt(args[1]);
      if (isNaN(index) || index < 1 || index > rules.length)
        return message.reply(lang("rulesNotFound", args[1]));
      const removed = rules.splice(index - 1, 1)[0];
      await threadsData.set(threadID, rules, "data.rules");
      return message.reply(lang("successDelete", index, removed));
    }

    // Remove all
    if (["remove", "reset", "-r"].includes(type)) {
      if (role < 1) return message.reply(lang("permission"));
      return message.reply(lang("confirmRemove"), (e, info) => {
        global.GoatBot.onReaction.set(info.messageID, {
          commandName: "rules",
          author: event.senderID,
          threadID
        });
      });
    }

    message.SyntaxError();
  },

  onReaction: async function ({ threadsData, message, Reaction, event, getLang }) {
    const lang = getLang();
    if (event.userID !== Reaction.author) return;
    await threadsData.set(Reaction.threadID, [], "data.rules");
    message.reply(lang("successRemove"));
  }
};
