const { getStreamsFromAttachment } = global.utils;
const axios = require("axios");

module.exports = {
  config: {
    name: "notification",
    aliases: ["notify", "announce"],
    version: "2.0",
    author: "ùêÄùê¨ùê¢ùêü ùêåùêöùê°ùê¶ùêÆùêù",
    countDown: 5,
    role: 2,
    shortDescription: {
      en: "Send notifications to all groups",
      bn: "‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®"
    },
    longDescription: {
      en: "Send messages to all groups with detailed status reports",
      bn: "‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶™‡¶æ‡¶®"
    },
    category: "owner",
    guide: {
      en: "{pn} [message]",
      bn: "{pn} [‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ]"
    },
    envConfig: {
      delayPerGroup: 300
    }
  },

  langs: {
    en: {
      missingMessage: "üìù Please enter the message you want to send",
      notification: "üì¢ Notification from Bot Admin\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n",
      sendingNotification: "‚è≥ Sending notification to %1 groups...",
      sentNotification: "‚úÖ Successfully sent to %1 groups",
      errorSendingNotification: "‚ùå Failed to send to %1 groups",
      successTitle: "üì¨ Notification Summary",
      attachmentNotice: "\n\nüìé Attachment included",
      groupList: "üìã Group List:\n",
      errorList: "‚ö†Ô∏è Errors occurred in:\n",
      noGroups: "‚ùå No groups found to send notification"
    },
    bn: {
      missingMessage: "üìù ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
      notification: "üì¢ ‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n",
      sendingNotification: "‚è≥ %1 ‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...",
      sentNotification: "‚úÖ %1 ‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      errorSendingNotification: "‚ùå %1 ‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø",
      successTitle: "üì¨ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂",
      attachmentNotice: "\n\nüìé ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      groupList: "üìã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n",
      errorList: "‚ö†Ô∏è ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá:\n",
      noGroups: "‚ùå ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø"
    }
  },

  onStart: async function ({ 
    message, 
    api, 
    event, 
    args, 
    commandName, 
    envCommands, 
    threadsData, 
    getLang 
  }) {
    try {
      const lang = getLang;
      const { delayPerGroup } = envCommands[commandName];

      // Check if message is provided
      if (!args[0] && event.attachments.length === 0) {
        return message.reply(lang("missingMessage"));
      }

      // Prepare message content
      const notificationMessage = lang("notification") + (args.join(" ") || "");
      const attachments = [
        ...event.attachments,
        ...(event.messageReply?.attachments || [])
      ].filter(item => ["photo", "png", "animated_image", "video", "audio"].includes(item.type));

      const formSend = {
        body: notificationMessage,
        attachment: await getStreamsFromAttachment(attachments)
      };

      // Get all groups where bot is a member
      const allThreads = await threadsData.getAll();
      const allThreadID = allThreads.filter(t => 
        t.isGroup && 
        t.members.some(m => m.userID === api.getCurrentUserID() && m.inGroup)
      );

      // Check if there are groups to send to
      if (allThreadID.length === 0) {
        return message.reply(lang("noGroups"));
      }

      // Send initial progress message
      const progressMsg = await message.reply(lang("sendingNotification", allThreadID.length));

      let sendSuccess = 0;
      const successGroups = [];
      const errorGroups = [];
      const waitingSend = [];

      // Send notifications with delay
      for (const thread of allThreadID) {
        try {
          const sendPromise = api.sendMessage(
            {...formSend, mentions: []}, 
            thread.threadID
          );
          
          waitingSend.push({
            threadID: thread.threadID,
            threadName: thread.threadName || "Unknown Group",
            pending: sendPromise
          });
          
          await new Promise(resolve => setTimeout(resolve, delayPerGroup));
        } catch (e) {
          errorGroups.push({
            threadID: thread.threadID,
            threadName: thread.threadName || "Unknown Group",
            error: e.message
          });
        }
      }

      // Process results
      for (const sended of waitingSend) {
        try {
          await sended.pending;
          sendSuccess++;
          successGroups.push({
            id: sended.threadID,
            name: sended.threadName
          });
        } catch (e) {
          errorGroups.push({
            threadID: sended.threadID,
            threadName: sended.threadName,
            error: e.message
          });
        }
      }

      // Prepare summary report
      let summaryMessage = `‚ú® ${lang("successTitle")} ‚ú®\n\n`;
      summaryMessage += `‚úÖ ${lang("sentNotification", sendSuccess)}\n`;
      summaryMessage += `‚ùå ${lang("errorSendingNotification", errorGroups.length)}\n\n`;
      
      if (successGroups.length > 0) {
        summaryMessage += `${lang("groupList")}`;
        summaryMessage += successGroups.map(g => `‚Ä¢ ${g.name} (${g.id})`).join("\n");
      }
      
      if (errorGroups.length > 0) {
        summaryMessage += `\n\n${lang("errorList")}`;
        summaryMessage += errorGroups.map(g => 
          `‚Ä¢ ${g.threadName} (${g.threadID})\n   ‚Üí ${g.error}`
        ).join("\n");
      }
      
      if (attachments.length > 0) {
        summaryMessage += lang("attachmentNotice");
      }

      // Send final summary
      await message.reply(summaryMessage);
      await api.unsendMessage(progressMsg.messageID);
      
    } catch (error) {
      console.error("Notification Command Error:", error);
      message.reply("‚ùå An unexpected error occurred. Please check logs.");
    }
  }
};
