module.exports = {
  config: {
    name: "setrole",
    aliases: ["cmdrole", "commandrole"],
    version: "3.0.0",
    author: "NTKhang & Upgraded by ‚ú®Asif‚ú®",
    countDown: 5,
    role: 1, // Requires admin privileges
    description: {
      en: "Advanced command role management system",
      vi: "H·ªá th·ªëng qu·∫£n l√Ω role l·ªánh n√¢ng cao",
      bn: "‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∞‡ßã‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ"
    },
    category: "administration",
    guide: {
      en: `üìå Command Guide:
‚Ä¢ {pn} <command> <role> - Set role for command
  - 0: All members
  - 1: Admins only
  - default: Reset to default
‚Ä¢ {pn} list - View modified commands
‚Ä¢ {pn} help - Show this help menu

üîê Note: Only works for commands with default role < 2`,
      bn: `üìå ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ:
‚Ä¢ {pn} <command> <role> - ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßã‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
  - 0: ‡¶∏‡¶¨ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø
  - 1: ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®
  - default: ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ {pn} list - ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
‚Ä¢ {pn} help - ‡¶è‡¶á ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®

üîê ‡¶®‡ßã‡¶ü: ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶∞‡ßã‡¶≤ < 2 ‡¶è‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá`
    }
  },

  langs: {
    en: {
      noModified: "‚ÑπÔ∏è No commands have modified roles",
      modifiedList: "üìú Commands with modified roles:\n%1",
      noPermission: "‚õî Only admins can modify command roles",
      notFound: "‚ùå Command \"%1\" not found",
      cantModify: "‚ùå Can't modify role for command \"%1\"",
      reset: "üîÑ Reset role for \"%1\" to default",
      updated: "‚úÖ Updated role for \"%1\" to %2",
      invalidRole: "‚ö†Ô∏è Invalid role value. Use 0, 1 or 'default'",
      error: "‚ùå An error occurred: %1",
      help: `üìö Need help? Use '{pn} guide' for detailed instructions`
    },
    bn: {
      noModified: "‚ÑπÔ∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶∞‡ßã‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø",
      modifiedList: "üìú ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶∞‡ßã‡¶≤‡¶∏‡¶π ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏‡¶Æ‡ßÇ‡¶π:\n%1",
      noPermission: "‚õî ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∞‡ßã‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá",
      notFound: "‚ùå \"%1\" ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø",
      cantModify: "‚ùå \"%1\" ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶∞‡ßã‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ",
      reset: "üîÑ \"%1\" ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶∞‡ßã‡¶≤ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      updated: "‚úÖ \"%1\" ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶∞‡ßã‡¶≤ %2 ‡¶è ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      invalidRole: "‚ö†Ô∏è ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶∞‡ßã‡¶≤ ‡¶Æ‡¶æ‡¶®‡•§ 0, 1 ‡¶¨‡¶æ 'default' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®",
      error: "‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: %1",
      help: `üìö ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®? '{pn} guide' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø`
    }
  },

  onStart: async function ({ 
    message, 
    event, 
    args, 
    role, 
    threadsData, 
    getLang,
    prefix
  }) {
    try {
      const { commands, aliases } = global.GoatBot;
      const action = args[0]?.toLowerCase();
      const lang = getLang;

      // Show help if no action specified
      if (!action || action === "help") {
        return message.reply(lang("help").replace(/{pn}/g, prefix + this.config.name));
      }

      // Get current role settings
      const customRoles = await threadsData.get(event.threadID, "data.commandRoles", {});

      // Handle list action
      if (["list", "view", "show"].includes(action)) {
        if (!Object.keys(customRoles).length) {
          return message.reply(lang("noModified"));
        }
        
        const list = Object.entries(customRoles)
          .map(([cmd, role]) => `‚Ä¢ ${cmd}: ${role}`)
          .join("\n");
        
        return message.reply(lang("modifiedList", list));
      }

      // Handle role modification
      if (role < 1) {
        return message.reply(lang("noPermission"));
      }

      const [commandName, newRole] = args;
      if (!commandName || !newRole) {
        return message.SyntaxError();
      }

      // Validate new role
      if (!["0", "1", "default"].includes(newRole.toLowerCase())) {
        return message.reply(lang("invalidRole"));
      }

      // Find the command
      const command = commands.get(commandName.toLowerCase()) || 
                     commands.get(aliases.get(commandName.toLowerCase()));
      
      if (!command) {
        return message.reply(lang("notFound", commandName));
      }

      const actualCommandName = command.config.name;
      
      // Check if command can be modified
      if (command.config.role > 1) {
        return message.reply(lang("cantModify", actualCommandName));
      }

      // Process role change
      if (newRole.toLowerCase() === "default") {
        delete customRoles[actualCommandName];
        await threadsData.set(event.threadID, customRoles, "data.commandRoles");
        return message.reply(lang("reset", actualCommandName));
      }

      const numericRole = parseInt(newRole);
      customRoles[actualCommandName] = numericRole;
      await threadsData.set(event.threadID, customRoles, "data.commandRoles");
      return message.reply(lang("updated", actualCommandName, numericRole));

    } catch (error) {
      console.error("Error in setrole command:", error);
      return message.reply(lang("error", error.message));
    }
  }
};
